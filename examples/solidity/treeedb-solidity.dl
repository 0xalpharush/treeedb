// NOTE: This file was generated by treeedb v0.1.0. Do not edit!
.type SolidityAnyPragmaToken <: symbol
.decl solidity_any_pragma_token(x: SolidityAnyPragmaToken)
solidity_any_pragma_token(as(x, SolidityAnyPragmaToken)) :- solidity_node(x, "any_pragma_token", _, _, _, _, _, _, _, _, _, _, _).
.decl solidity_any_pragma_token_identifier_c(x: SolidityAnyPragmaToken, y: SolidityIdentifier)
solidity_any_pragma_token_identifier_c(x, as(y, SolidityIdentifier)) :- solidity_any_pragma_token(x), solidity_child(x, y).
.decl solidity_any_pragma_token_pragma_value_c(x: SolidityAnyPragmaToken, y: SolidityPragmaValue)
solidity_any_pragma_token_pragma_value_c(x, as(y, SolidityPragmaValue)) :- solidity_any_pragma_token(x), solidity_child(x, y).

.type SolidityAnySourceType <: symbol
.decl solidity_any_source_type(x: SolidityAnySourceType)
solidity_any_source_type(as(x, SolidityAnySourceType)) :- solidity_node(x, "any_source_type", _, _, _, _, _, _, _, _, _, _, _).

.type SolidityArrayAccess <: symbol
.decl solidity_array_access(x: SolidityArrayAccess)
solidity_array_access(as(x, SolidityArrayAccess)) :- solidity_node(x, "array_access", _, _, _, _, _, _, _, _, _, _, _).
.type SolidityFieldArrayAccessBase = SolidityArrayAccess | SolidityAssignmentExpression | SolidityAugmentedAssignmentExpression | SolidityBinaryExpression | SolidityBooleanLiteral | SolidityCallExpression | SolidityHexStringLiteral | SolidityIdentifier | SolidityInlineArrayExpression | SolidityMemberExpression | SolidityMetaTypeExpression | SolidityNewExpression | SolidityNumberLiteral | SolidityParenthesizedExpression | SolidityPayableConversionExpression | SolidityPrimitiveType | SoliditySliceAccess | SolidityStringLiteral | SolidityStructExpression | SolidityTernaryExpression | SolidityTupleExpression | SolidityTypeCastExpression | SolidityUnaryExpression | SolidityUnicodeStringLiteral | SolidityUpdateExpression | SolidityUserDefinedType
.decl solidity_array_access_base_f(x: SolidityArrayAccess, y: SolidityFieldArrayAccessBase)
solidity_array_access_base_f(x, as(y, SolidityFieldArrayAccessBase)) :- solidity_array_access(x), solidity_field(x, "base", y).
.type SolidityFieldArrayAccessIndex = SolidityArrayAccess | SolidityAssignmentExpression | SolidityAugmentedAssignmentExpression | SolidityBinaryExpression | SolidityBooleanLiteral | SolidityCallExpression | SolidityHexStringLiteral | SolidityIdentifier | SolidityInlineArrayExpression | SolidityMemberExpression | SolidityMetaTypeExpression | SolidityNewExpression | SolidityNumberLiteral | SolidityParenthesizedExpression | SolidityPayableConversionExpression | SolidityPrimitiveType | SoliditySliceAccess | SolidityStringLiteral | SolidityStructExpression | SolidityTernaryExpression | SolidityTupleExpression | SolidityTypeCastExpression | SolidityUnaryExpression | SolidityUnicodeStringLiteral | SolidityUpdateExpression | SolidityUserDefinedType
.decl solidity_array_access_index_f(x: SolidityArrayAccess, y: SolidityFieldArrayAccessIndex)
solidity_array_access_index_f(x, as(y, SolidityFieldArrayAccessIndex)) :- solidity_array_access(x), solidity_field(x, "index", y).

.type SolidityAssemblyStatement <: symbol
.decl solidity_assembly_statement(x: SolidityAssemblyStatement)
solidity_assembly_statement(as(x, SolidityAssemblyStatement)) :- solidity_node(x, "assembly_statement", _, _, _, _, _, _, _, _, _, _, _).
.decl solidity_assembly_statement_yul_assignment_c(x: SolidityAssemblyStatement, y: SolidityYulAssignment)
solidity_assembly_statement_yul_assignment_c(x, as(y, SolidityYulAssignment)) :- solidity_assembly_statement(x), solidity_child(x, y).
.decl solidity_assembly_statement_yul_block_c(x: SolidityAssemblyStatement, y: SolidityYulBlock)
solidity_assembly_statement_yul_block_c(x, as(y, SolidityYulBlock)) :- solidity_assembly_statement(x), solidity_child(x, y).
.decl solidity_assembly_statement_yul_boolean_c(x: SolidityAssemblyStatement, y: SolidityYulBoolean)
solidity_assembly_statement_yul_boolean_c(x, as(y, SolidityYulBoolean)) :- solidity_assembly_statement(x), solidity_child(x, y).
.decl solidity_assembly_statement_yul_break_c(x: SolidityAssemblyStatement, y: SolidityYulBreak)
solidity_assembly_statement_yul_break_c(x, as(y, SolidityYulBreak)) :- solidity_assembly_statement(x), solidity_child(x, y).
.decl solidity_assembly_statement_yul_continue_c(x: SolidityAssemblyStatement, y: SolidityYulContinue)
solidity_assembly_statement_yul_continue_c(x, as(y, SolidityYulContinue)) :- solidity_assembly_statement(x), solidity_child(x, y).
.decl solidity_assembly_statement_yul_decimal_number_c(x: SolidityAssemblyStatement, y: SolidityYulDecimalNumber)
solidity_assembly_statement_yul_decimal_number_c(x, as(y, SolidityYulDecimalNumber)) :- solidity_assembly_statement(x), solidity_child(x, y).
.decl solidity_assembly_statement_yul_for_statement_c(x: SolidityAssemblyStatement, y: SolidityYulForStatement)
solidity_assembly_statement_yul_for_statement_c(x, as(y, SolidityYulForStatement)) :- solidity_assembly_statement(x), solidity_child(x, y).
.decl solidity_assembly_statement_yul_function_call_c(x: SolidityAssemblyStatement, y: SolidityYulFunctionCall)
solidity_assembly_statement_yul_function_call_c(x, as(y, SolidityYulFunctionCall)) :- solidity_assembly_statement(x), solidity_child(x, y).
.decl solidity_assembly_statement_yul_function_definition_c(x: SolidityAssemblyStatement, y: SolidityYulFunctionDefinition)
solidity_assembly_statement_yul_function_definition_c(x, as(y, SolidityYulFunctionDefinition)) :- solidity_assembly_statement(x), solidity_child(x, y).
.decl solidity_assembly_statement_yul_hex_number_c(x: SolidityAssemblyStatement, y: SolidityYulHexNumber)
solidity_assembly_statement_yul_hex_number_c(x, as(y, SolidityYulHexNumber)) :- solidity_assembly_statement(x), solidity_child(x, y).
.decl solidity_assembly_statement_yul_if_statement_c(x: SolidityAssemblyStatement, y: SolidityYulIfStatement)
solidity_assembly_statement_yul_if_statement_c(x, as(y, SolidityYulIfStatement)) :- solidity_assembly_statement(x), solidity_child(x, y).
.decl solidity_assembly_statement_yul_label_c(x: SolidityAssemblyStatement, y: SolidityYulLabel)
solidity_assembly_statement_yul_label_c(x, as(y, SolidityYulLabel)) :- solidity_assembly_statement(x), solidity_child(x, y).
.decl solidity_assembly_statement_yul_leave_c(x: SolidityAssemblyStatement, y: SolidityYulLeave)
solidity_assembly_statement_yul_leave_c(x, as(y, SolidityYulLeave)) :- solidity_assembly_statement(x), solidity_child(x, y).
.decl solidity_assembly_statement_yul_string_literal_c(x: SolidityAssemblyStatement, y: SolidityYulStringLiteral)
solidity_assembly_statement_yul_string_literal_c(x, as(y, SolidityYulStringLiteral)) :- solidity_assembly_statement(x), solidity_child(x, y).
.decl solidity_assembly_statement_yul_switch_statement_c(x: SolidityAssemblyStatement, y: SolidityYulSwitchStatement)
solidity_assembly_statement_yul_switch_statement_c(x, as(y, SolidityYulSwitchStatement)) :- solidity_assembly_statement(x), solidity_child(x, y).
.decl solidity_assembly_statement_yul_variable_declaration_c(x: SolidityAssemblyStatement, y: SolidityYulVariableDeclaration)
solidity_assembly_statement_yul_variable_declaration_c(x, as(y, SolidityYulVariableDeclaration)) :- solidity_assembly_statement(x), solidity_child(x, y).

.type SolidityAssignmentExpression <: symbol
.decl solidity_assignment_expression(x: SolidityAssignmentExpression)
solidity_assignment_expression(as(x, SolidityAssignmentExpression)) :- solidity_node(x, "assignment_expression", _, _, _, _, _, _, _, _, _, _, _).
.type SolidityFieldAssignmentExpressionLeft = SolidityArrayAccess | SolidityAssignmentExpression | SolidityAugmentedAssignmentExpression | SolidityBinaryExpression | SolidityBooleanLiteral | SolidityCallExpression | SolidityHexStringLiteral | SolidityIdentifier | SolidityInlineArrayExpression | SolidityMemberExpression | SolidityMetaTypeExpression | SolidityNewExpression | SolidityNumberLiteral | SolidityParenthesizedExpression | SolidityPayableConversionExpression | SolidityPrimitiveType | SoliditySliceAccess | SolidityStringLiteral | SolidityStructExpression | SolidityTernaryExpression | SolidityTupleExpression | SolidityTypeCastExpression | SolidityUnaryExpression | SolidityUnicodeStringLiteral | SolidityUpdateExpression | SolidityUserDefinedType
.decl solidity_assignment_expression_left_f(x: SolidityAssignmentExpression, y: SolidityFieldAssignmentExpressionLeft)
solidity_assignment_expression_left_f(x, as(y, SolidityFieldAssignmentExpressionLeft)) :- solidity_assignment_expression(x), solidity_field(x, "left", y).
.type SolidityFieldAssignmentExpressionRight = SolidityArrayAccess | SolidityAssignmentExpression | SolidityAugmentedAssignmentExpression | SolidityBinaryExpression | SolidityBooleanLiteral | SolidityCallExpression | SolidityHexStringLiteral | SolidityIdentifier | SolidityInlineArrayExpression | SolidityMemberExpression | SolidityMetaTypeExpression | SolidityNewExpression | SolidityNumberLiteral | SolidityParenthesizedExpression | SolidityPayableConversionExpression | SolidityPrimitiveType | SoliditySliceAccess | SolidityStringLiteral | SolidityStructExpression | SolidityTernaryExpression | SolidityTupleExpression | SolidityTypeCastExpression | SolidityUnaryExpression | SolidityUnicodeStringLiteral | SolidityUpdateExpression | SolidityUserDefinedType
.decl solidity_assignment_expression_right_f(x: SolidityAssignmentExpression, y: SolidityFieldAssignmentExpressionRight)
solidity_assignment_expression_right_f(x, as(y, SolidityFieldAssignmentExpressionRight)) :- solidity_assignment_expression(x), solidity_field(x, "right", y).

.type SolidityAugmentedAssignmentExpression <: symbol
.decl solidity_augmented_assignment_expression(x: SolidityAugmentedAssignmentExpression)
solidity_augmented_assignment_expression(as(x, SolidityAugmentedAssignmentExpression)) :- solidity_node(x, "augmented_assignment_expression", _, _, _, _, _, _, _, _, _, _, _).
.type SolidityFieldAugmentedAssignmentExpressionLeft = SolidityArrayAccess | SolidityAssignmentExpression | SolidityAugmentedAssignmentExpression | SolidityBinaryExpression | SolidityBooleanLiteral | SolidityCallExpression | SolidityHexStringLiteral | SolidityIdentifier | SolidityInlineArrayExpression | SolidityMemberExpression | SolidityMetaTypeExpression | SolidityNewExpression | SolidityNumberLiteral | SolidityParenthesizedExpression | SolidityPayableConversionExpression | SolidityPrimitiveType | SoliditySliceAccess | SolidityStringLiteral | SolidityStructExpression | SolidityTernaryExpression | SolidityTupleExpression | SolidityTypeCastExpression | SolidityUnaryExpression | SolidityUnicodeStringLiteral | SolidityUpdateExpression | SolidityUserDefinedType
.decl solidity_augmented_assignment_expression_left_f(x: SolidityAugmentedAssignmentExpression, y: SolidityFieldAugmentedAssignmentExpressionLeft)
solidity_augmented_assignment_expression_left_f(x, as(y, SolidityFieldAugmentedAssignmentExpressionLeft)) :- solidity_augmented_assignment_expression(x), solidity_field(x, "left", y).
.type SolidityFieldAugmentedAssignmentExpressionRight = SolidityArrayAccess | SolidityAssignmentExpression | SolidityAugmentedAssignmentExpression | SolidityBinaryExpression | SolidityBooleanLiteral | SolidityCallExpression | SolidityHexStringLiteral | SolidityIdentifier | SolidityInlineArrayExpression | SolidityMemberExpression | SolidityMetaTypeExpression | SolidityNewExpression | SolidityNumberLiteral | SolidityParenthesizedExpression | SolidityPayableConversionExpression | SolidityPrimitiveType | SoliditySliceAccess | SolidityStringLiteral | SolidityStructExpression | SolidityTernaryExpression | SolidityTupleExpression | SolidityTypeCastExpression | SolidityUnaryExpression | SolidityUnicodeStringLiteral | SolidityUpdateExpression | SolidityUserDefinedType
.decl solidity_augmented_assignment_expression_right_f(x: SolidityAugmentedAssignmentExpression, y: SolidityFieldAugmentedAssignmentExpressionRight)
solidity_augmented_assignment_expression_right_f(x, as(y, SolidityFieldAugmentedAssignmentExpressionRight)) :- solidity_augmented_assignment_expression(x), solidity_field(x, "right", y).

.type SolidityBinaryExpression <: symbol
.decl solidity_binary_expression(x: SolidityBinaryExpression)
solidity_binary_expression(as(x, SolidityBinaryExpression)) :- solidity_node(x, "binary_expression", _, _, _, _, _, _, _, _, _, _, _).
.type SolidityFieldBinaryExpressionLeft = SolidityArrayAccess | SolidityAssignmentExpression | SolidityAugmentedAssignmentExpression | SolidityBinaryExpression | SolidityBooleanLiteral | SolidityCallExpression | SolidityHexStringLiteral | SolidityIdentifier | SolidityInlineArrayExpression | SolidityMemberExpression | SolidityMetaTypeExpression | SolidityNewExpression | SolidityNumberLiteral | SolidityParenthesizedExpression | SolidityPayableConversionExpression | SolidityPrimitiveType | SoliditySliceAccess | SolidityStringLiteral | SolidityStructExpression | SolidityTernaryExpression | SolidityTupleExpression | SolidityTypeCastExpression | SolidityUnaryExpression | SolidityUnicodeStringLiteral | SolidityUpdateExpression | SolidityUserDefinedType
.decl solidity_binary_expression_left_f(x: SolidityBinaryExpression, y: SolidityFieldBinaryExpressionLeft)
solidity_binary_expression_left_f(x, as(y, SolidityFieldBinaryExpressionLeft)) :- solidity_binary_expression(x), solidity_field(x, "left", y).
.type SolidityFieldBinaryExpressionRight = SolidityArrayAccess | SolidityAssignmentExpression | SolidityAugmentedAssignmentExpression | SolidityBinaryExpression | SolidityBooleanLiteral | SolidityCallExpression | SolidityHexStringLiteral | SolidityIdentifier | SolidityInlineArrayExpression | SolidityMemberExpression | SolidityMetaTypeExpression | SolidityNewExpression | SolidityNumberLiteral | SolidityParenthesizedExpression | SolidityPayableConversionExpression | SolidityPrimitiveType | SoliditySliceAccess | SolidityStringLiteral | SolidityStructExpression | SolidityTernaryExpression | SolidityTupleExpression | SolidityTypeCastExpression | SolidityUnaryExpression | SolidityUnicodeStringLiteral | SolidityUpdateExpression | SolidityUserDefinedType
.decl solidity_binary_expression_right_f(x: SolidityBinaryExpression, y: SolidityFieldBinaryExpressionRight)
solidity_binary_expression_right_f(x, as(y, SolidityFieldBinaryExpressionRight)) :- solidity_binary_expression(x), solidity_field(x, "right", y).

.type SolidityBlockStatement <: symbol
.decl solidity_block_statement(x: SolidityBlockStatement)
solidity_block_statement(as(x, SolidityBlockStatement)) :- solidity_node(x, "block_statement", _, _, _, _, _, _, _, _, _, _, _).
.decl solidity_block_statement_assembly_statement_c(x: SolidityBlockStatement, y: SolidityAssemblyStatement)
solidity_block_statement_assembly_statement_c(x, as(y, SolidityAssemblyStatement)) :- solidity_block_statement(x), solidity_child(x, y).
.decl solidity_block_statement_block_statement_c(x: SolidityBlockStatement, y: SolidityBlockStatement)
solidity_block_statement_block_statement_c(x, as(y, SolidityBlockStatement)) :- solidity_block_statement(x), solidity_child(x, y).
.decl solidity_block_statement_break_statement_c(x: SolidityBlockStatement, y: SolidityBreakStatement)
solidity_block_statement_break_statement_c(x, as(y, SolidityBreakStatement)) :- solidity_block_statement(x), solidity_child(x, y).
.decl solidity_block_statement_continue_statement_c(x: SolidityBlockStatement, y: SolidityContinueStatement)
solidity_block_statement_continue_statement_c(x, as(y, SolidityContinueStatement)) :- solidity_block_statement(x), solidity_child(x, y).
.decl solidity_block_statement_do_while_statement_c(x: SolidityBlockStatement, y: SolidityDoWhileStatement)
solidity_block_statement_do_while_statement_c(x, as(y, SolidityDoWhileStatement)) :- solidity_block_statement(x), solidity_child(x, y).
.decl solidity_block_statement_emit_statement_c(x: SolidityBlockStatement, y: SolidityEmitStatement)
solidity_block_statement_emit_statement_c(x, as(y, SolidityEmitStatement)) :- solidity_block_statement(x), solidity_child(x, y).
.decl solidity_block_statement_expression_statement_c(x: SolidityBlockStatement, y: SolidityExpressionStatement)
solidity_block_statement_expression_statement_c(x, as(y, SolidityExpressionStatement)) :- solidity_block_statement(x), solidity_child(x, y).
.decl solidity_block_statement_for_statement_c(x: SolidityBlockStatement, y: SolidityForStatement)
solidity_block_statement_for_statement_c(x, as(y, SolidityForStatement)) :- solidity_block_statement(x), solidity_child(x, y).
.decl solidity_block_statement_if_statement_c(x: SolidityBlockStatement, y: SolidityIfStatement)
solidity_block_statement_if_statement_c(x, as(y, SolidityIfStatement)) :- solidity_block_statement(x), solidity_child(x, y).
.decl solidity_block_statement_return_statement_c(x: SolidityBlockStatement, y: SolidityReturnStatement)
solidity_block_statement_return_statement_c(x, as(y, SolidityReturnStatement)) :- solidity_block_statement(x), solidity_child(x, y).
.decl solidity_block_statement_revert_statement_c(x: SolidityBlockStatement, y: SolidityRevertStatement)
solidity_block_statement_revert_statement_c(x, as(y, SolidityRevertStatement)) :- solidity_block_statement(x), solidity_child(x, y).
.decl solidity_block_statement_try_statement_c(x: SolidityBlockStatement, y: SolidityTryStatement)
solidity_block_statement_try_statement_c(x, as(y, SolidityTryStatement)) :- solidity_block_statement(x), solidity_child(x, y).
.decl solidity_block_statement_variable_declaration_statement_c(x: SolidityBlockStatement, y: SolidityVariableDeclarationStatement)
solidity_block_statement_variable_declaration_statement_c(x, as(y, SolidityVariableDeclarationStatement)) :- solidity_block_statement(x), solidity_child(x, y).
.decl solidity_block_statement_while_statement_c(x: SolidityBlockStatement, y: SolidityWhileStatement)
solidity_block_statement_while_statement_c(x, as(y, SolidityWhileStatement)) :- solidity_block_statement(x), solidity_child(x, y).

.type SolidityBooleanLiteral <: symbol
.decl solidity_boolean_literal(x: SolidityBooleanLiteral)
solidity_boolean_literal(as(x, SolidityBooleanLiteral)) :- solidity_node(x, "boolean_literal", _, _, _, _, _, _, _, _, _, _, _).
.decl solidity_boolean_literal_false_c(x: SolidityBooleanLiteral, y: SolidityFalse)
solidity_boolean_literal_false_c(x, as(y, SolidityFalse)) :- solidity_boolean_literal(x), solidity_child(x, y).
.decl solidity_boolean_literal_true_c(x: SolidityBooleanLiteral, y: SolidityTrue)
solidity_boolean_literal_true_c(x, as(y, SolidityTrue)) :- solidity_boolean_literal(x), solidity_child(x, y).

.type SolidityBreakStatement <: symbol
.decl solidity_break_statement(x: SolidityBreakStatement)
solidity_break_statement(as(x, SolidityBreakStatement)) :- solidity_node(x, "break_statement", _, _, _, _, _, _, _, _, _, _, _).

.type SolidityCallArgument <: symbol
.decl solidity_call_argument(x: SolidityCallArgument)
solidity_call_argument(as(x, SolidityCallArgument)) :- solidity_node(x, "call_argument", _, _, _, _, _, _, _, _, _, _, _).
.decl solidity_call_argument_array_access_c(x: SolidityCallArgument, y: SolidityArrayAccess)
solidity_call_argument_array_access_c(x, as(y, SolidityArrayAccess)) :- solidity_call_argument(x), solidity_child(x, y).
.decl solidity_call_argument_assignment_expression_c(x: SolidityCallArgument, y: SolidityAssignmentExpression)
solidity_call_argument_assignment_expression_c(x, as(y, SolidityAssignmentExpression)) :- solidity_call_argument(x), solidity_child(x, y).
.decl solidity_call_argument_augmented_assignment_expression_c(x: SolidityCallArgument, y: SolidityAugmentedAssignmentExpression)
solidity_call_argument_augmented_assignment_expression_c(x, as(y, SolidityAugmentedAssignmentExpression)) :- solidity_call_argument(x), solidity_child(x, y).
.decl solidity_call_argument_binary_expression_c(x: SolidityCallArgument, y: SolidityBinaryExpression)
solidity_call_argument_binary_expression_c(x, as(y, SolidityBinaryExpression)) :- solidity_call_argument(x), solidity_child(x, y).
.decl solidity_call_argument_boolean_literal_c(x: SolidityCallArgument, y: SolidityBooleanLiteral)
solidity_call_argument_boolean_literal_c(x, as(y, SolidityBooleanLiteral)) :- solidity_call_argument(x), solidity_child(x, y).
.decl solidity_call_argument_call_expression_c(x: SolidityCallArgument, y: SolidityCallExpression)
solidity_call_argument_call_expression_c(x, as(y, SolidityCallExpression)) :- solidity_call_argument(x), solidity_child(x, y).
.decl solidity_call_argument_call_struct_argument_c(x: SolidityCallArgument, y: SolidityCallStructArgument)
solidity_call_argument_call_struct_argument_c(x, as(y, SolidityCallStructArgument)) :- solidity_call_argument(x), solidity_child(x, y).
.decl solidity_call_argument_hex_string_literal_c(x: SolidityCallArgument, y: SolidityHexStringLiteral)
solidity_call_argument_hex_string_literal_c(x, as(y, SolidityHexStringLiteral)) :- solidity_call_argument(x), solidity_child(x, y).
.decl solidity_call_argument_identifier_c(x: SolidityCallArgument, y: SolidityIdentifier)
solidity_call_argument_identifier_c(x, as(y, SolidityIdentifier)) :- solidity_call_argument(x), solidity_child(x, y).
.decl solidity_call_argument_inline_array_expression_c(x: SolidityCallArgument, y: SolidityInlineArrayExpression)
solidity_call_argument_inline_array_expression_c(x, as(y, SolidityInlineArrayExpression)) :- solidity_call_argument(x), solidity_child(x, y).
.decl solidity_call_argument_member_expression_c(x: SolidityCallArgument, y: SolidityMemberExpression)
solidity_call_argument_member_expression_c(x, as(y, SolidityMemberExpression)) :- solidity_call_argument(x), solidity_child(x, y).
.decl solidity_call_argument_meta_type_expression_c(x: SolidityCallArgument, y: SolidityMetaTypeExpression)
solidity_call_argument_meta_type_expression_c(x, as(y, SolidityMetaTypeExpression)) :- solidity_call_argument(x), solidity_child(x, y).
.decl solidity_call_argument_new_expression_c(x: SolidityCallArgument, y: SolidityNewExpression)
solidity_call_argument_new_expression_c(x, as(y, SolidityNewExpression)) :- solidity_call_argument(x), solidity_child(x, y).
.decl solidity_call_argument_number_literal_c(x: SolidityCallArgument, y: SolidityNumberLiteral)
solidity_call_argument_number_literal_c(x, as(y, SolidityNumberLiteral)) :- solidity_call_argument(x), solidity_child(x, y).
.decl solidity_call_argument_parenthesized_expression_c(x: SolidityCallArgument, y: SolidityParenthesizedExpression)
solidity_call_argument_parenthesized_expression_c(x, as(y, SolidityParenthesizedExpression)) :- solidity_call_argument(x), solidity_child(x, y).
.decl solidity_call_argument_payable_conversion_expression_c(x: SolidityCallArgument, y: SolidityPayableConversionExpression)
solidity_call_argument_payable_conversion_expression_c(x, as(y, SolidityPayableConversionExpression)) :- solidity_call_argument(x), solidity_child(x, y).
.decl solidity_call_argument_primitive_type_c(x: SolidityCallArgument, y: SolidityPrimitiveType)
solidity_call_argument_primitive_type_c(x, as(y, SolidityPrimitiveType)) :- solidity_call_argument(x), solidity_child(x, y).
.decl solidity_call_argument_slice_access_c(x: SolidityCallArgument, y: SoliditySliceAccess)
solidity_call_argument_slice_access_c(x, as(y, SoliditySliceAccess)) :- solidity_call_argument(x), solidity_child(x, y).
.decl solidity_call_argument_string_literal_c(x: SolidityCallArgument, y: SolidityStringLiteral)
solidity_call_argument_string_literal_c(x, as(y, SolidityStringLiteral)) :- solidity_call_argument(x), solidity_child(x, y).
.decl solidity_call_argument_struct_expression_c(x: SolidityCallArgument, y: SolidityStructExpression)
solidity_call_argument_struct_expression_c(x, as(y, SolidityStructExpression)) :- solidity_call_argument(x), solidity_child(x, y).
.decl solidity_call_argument_ternary_expression_c(x: SolidityCallArgument, y: SolidityTernaryExpression)
solidity_call_argument_ternary_expression_c(x, as(y, SolidityTernaryExpression)) :- solidity_call_argument(x), solidity_child(x, y).
.decl solidity_call_argument_tuple_expression_c(x: SolidityCallArgument, y: SolidityTupleExpression)
solidity_call_argument_tuple_expression_c(x, as(y, SolidityTupleExpression)) :- solidity_call_argument(x), solidity_child(x, y).
.decl solidity_call_argument_type_cast_expression_c(x: SolidityCallArgument, y: SolidityTypeCastExpression)
solidity_call_argument_type_cast_expression_c(x, as(y, SolidityTypeCastExpression)) :- solidity_call_argument(x), solidity_child(x, y).
.decl solidity_call_argument_unary_expression_c(x: SolidityCallArgument, y: SolidityUnaryExpression)
solidity_call_argument_unary_expression_c(x, as(y, SolidityUnaryExpression)) :- solidity_call_argument(x), solidity_child(x, y).
.decl solidity_call_argument_unicode_string_literal_c(x: SolidityCallArgument, y: SolidityUnicodeStringLiteral)
solidity_call_argument_unicode_string_literal_c(x, as(y, SolidityUnicodeStringLiteral)) :- solidity_call_argument(x), solidity_child(x, y).
.decl solidity_call_argument_update_expression_c(x: SolidityCallArgument, y: SolidityUpdateExpression)
solidity_call_argument_update_expression_c(x, as(y, SolidityUpdateExpression)) :- solidity_call_argument(x), solidity_child(x, y).
.decl solidity_call_argument_user_defined_type_c(x: SolidityCallArgument, y: SolidityUserDefinedType)
solidity_call_argument_user_defined_type_c(x, as(y, SolidityUserDefinedType)) :- solidity_call_argument(x), solidity_child(x, y).

.type SolidityCallExpression <: symbol
.decl solidity_call_expression(x: SolidityCallExpression)
solidity_call_expression(as(x, SolidityCallExpression)) :- solidity_node(x, "call_expression", _, _, _, _, _, _, _, _, _, _, _).
.type SolidityFieldCallExpressionFunction = SolidityArrayAccess | SolidityAssignmentExpression | SolidityAugmentedAssignmentExpression | SolidityBinaryExpression | SolidityBooleanLiteral | SolidityCallExpression | SolidityHexStringLiteral | SolidityIdentifier | SolidityInlineArrayExpression | SolidityMemberExpression | SolidityMetaTypeExpression | SolidityNewExpression | SolidityNumberLiteral | SolidityParenthesizedExpression | SolidityPayableConversionExpression | SolidityPrimitiveType | SoliditySliceAccess | SolidityStringLiteral | SolidityStructExpression | SolidityTernaryExpression | SolidityTupleExpression | SolidityTypeCastExpression | SolidityUnaryExpression | SolidityUnicodeStringLiteral | SolidityUpdateExpression | SolidityUserDefinedType
.decl solidity_call_expression_function_f(x: SolidityCallExpression, y: SolidityFieldCallExpressionFunction)
solidity_call_expression_function_f(x, as(y, SolidityFieldCallExpressionFunction)) :- solidity_call_expression(x), solidity_field(x, "function", y).
.decl solidity_call_expression_call_argument_c(x: SolidityCallExpression, y: SolidityCallArgument)
solidity_call_expression_call_argument_c(x, as(y, SolidityCallArgument)) :- solidity_call_expression(x), solidity_child(x, y).

.type SolidityCallStructArgument <: symbol
.decl solidity_call_struct_argument(x: SolidityCallStructArgument)
solidity_call_struct_argument(as(x, SolidityCallStructArgument)) :- solidity_node(x, "call_struct_argument", _, _, _, _, _, _, _, _, _, _, _).
.type SolidityFieldCallStructArgumentValue = SolidityArrayAccess | SolidityAssignmentExpression | SolidityAugmentedAssignmentExpression | SolidityBinaryExpression | SolidityBooleanLiteral | SolidityCallExpression | SolidityHexStringLiteral | SolidityIdentifier | SolidityInlineArrayExpression | SolidityMemberExpression | SolidityMetaTypeExpression | SolidityNewExpression | SolidityNumberLiteral | SolidityParenthesizedExpression | SolidityPayableConversionExpression | SolidityPrimitiveType | SoliditySliceAccess | SolidityStringLiteral | SolidityStructExpression | SolidityTernaryExpression | SolidityTupleExpression | SolidityTypeCastExpression | SolidityUnaryExpression | SolidityUnicodeStringLiteral | SolidityUpdateExpression | SolidityUserDefinedType
.decl solidity_call_struct_argument_value_f(x: SolidityCallStructArgument, y: SolidityFieldCallStructArgumentValue)
solidity_call_struct_argument_value_f(x, as(y, SolidityFieldCallStructArgumentValue)) :- solidity_call_struct_argument(x), solidity_field(x, "value", y).
.decl solidity_call_struct_argument_name_f(x: SolidityCallStructArgument, y: SolidityIdentifier)
solidity_call_struct_argument_name_f(x, as(y, SolidityIdentifier)) :- solidity_call_struct_argument(x), solidity_field(x, "name", y).

.type SolidityCatchClause <: symbol
.decl solidity_catch_clause(x: SolidityCatchClause)
solidity_catch_clause(as(x, SolidityCatchClause)) :- solidity_node(x, "catch_clause", _, _, _, _, _, _, _, _, _, _, _).
.decl solidity_catch_clause_body_f(x: SolidityCatchClause, y: SolidityBlockStatement)
solidity_catch_clause_body_f(x, as(y, SolidityBlockStatement)) :- solidity_catch_clause(x), solidity_field(x, "body", y).
.decl solidity_catch_clause_identifier_c(x: SolidityCatchClause, y: SolidityIdentifier)
solidity_catch_clause_identifier_c(x, as(y, SolidityIdentifier)) :- solidity_catch_clause(x), solidity_child(x, y).
.decl solidity_catch_clause_parameter_c(x: SolidityCatchClause, y: SolidityParameter)
solidity_catch_clause_parameter_c(x, as(y, SolidityParameter)) :- solidity_catch_clause(x), solidity_child(x, y).

.type SolidityConstantVariableDeclaration <: symbol
.decl solidity_constant_variable_declaration(x: SolidityConstantVariableDeclaration)
solidity_constant_variable_declaration(as(x, SolidityConstantVariableDeclaration)) :- solidity_node(x, "constant_variable_declaration", _, _, _, _, _, _, _, _, _, _, _).
.decl solidity_constant_variable_declaration_name_f(x: SolidityConstantVariableDeclaration, y: SolidityIdentifier)
solidity_constant_variable_declaration_name_f(x, as(y, SolidityIdentifier)) :- solidity_constant_variable_declaration(x), solidity_field(x, "name", y).
.decl solidity_constant_variable_declaration_type_f(x: SolidityConstantVariableDeclaration, y: SolidityTypeName)
solidity_constant_variable_declaration_type_f(x, as(y, SolidityTypeName)) :- solidity_constant_variable_declaration(x), solidity_field(x, "type", y).
.type SolidityFieldConstantVariableDeclarationValue = SolidityArrayAccess | SolidityAssignmentExpression | SolidityAugmentedAssignmentExpression | SolidityBinaryExpression | SolidityBooleanLiteral | SolidityCallExpression | SolidityHexStringLiteral | SolidityIdentifier | SolidityInlineArrayExpression | SolidityMemberExpression | SolidityMetaTypeExpression | SolidityNewExpression | SolidityNumberLiteral | SolidityParenthesizedExpression | SolidityPayableConversionExpression | SolidityPrimitiveType | SoliditySliceAccess | SolidityStringLiteral | SolidityStructExpression | SolidityTernaryExpression | SolidityTupleExpression | SolidityTypeCastExpression | SolidityUnaryExpression | SolidityUnicodeStringLiteral | SolidityUpdateExpression | SolidityUserDefinedType
.decl solidity_constant_variable_declaration_value_f(x: SolidityConstantVariableDeclaration, y: SolidityFieldConstantVariableDeclarationValue)
solidity_constant_variable_declaration_value_f(x, as(y, SolidityFieldConstantVariableDeclarationValue)) :- solidity_constant_variable_declaration(x), solidity_field(x, "value", y).

.type SolidityConstructorDefinition <: symbol
.decl solidity_constructor_definition(x: SolidityConstructorDefinition)
solidity_constructor_definition(as(x, SolidityConstructorDefinition)) :- solidity_node(x, "constructor_definition", _, _, _, _, _, _, _, _, _, _, _).
.decl solidity_constructor_definition_body_f(x: SolidityConstructorDefinition, y: SolidityFunctionBody)
solidity_constructor_definition_body_f(x, as(y, SolidityFunctionBody)) :- solidity_constructor_definition(x), solidity_field(x, "body", y).
.decl solidity_constructor_definition_modifier_invocation_c(x: SolidityConstructorDefinition, y: SolidityModifierInvocation)
solidity_constructor_definition_modifier_invocation_c(x, as(y, SolidityModifierInvocation)) :- solidity_constructor_definition(x), solidity_child(x, y).
.decl solidity_constructor_definition_parameter_c(x: SolidityConstructorDefinition, y: SolidityParameter)
solidity_constructor_definition_parameter_c(x, as(y, SolidityParameter)) :- solidity_constructor_definition(x), solidity_child(x, y).

.type SolidityContinueStatement <: symbol
.decl solidity_continue_statement(x: SolidityContinueStatement)
solidity_continue_statement(as(x, SolidityContinueStatement)) :- solidity_node(x, "continue_statement", _, _, _, _, _, _, _, _, _, _, _).

.type SolidityContractBody <: symbol
.decl solidity_contract_body(x: SolidityContractBody)
solidity_contract_body(as(x, SolidityContractBody)) :- solidity_node(x, "contract_body", _, _, _, _, _, _, _, _, _, _, _).
.decl solidity_contract_body_constructor_definition_c(x: SolidityContractBody, y: SolidityConstructorDefinition)
solidity_contract_body_constructor_definition_c(x, as(y, SolidityConstructorDefinition)) :- solidity_contract_body(x), solidity_child(x, y).
.decl solidity_contract_body_enum_declaration_c(x: SolidityContractBody, y: SolidityEnumDeclaration)
solidity_contract_body_enum_declaration_c(x, as(y, SolidityEnumDeclaration)) :- solidity_contract_body(x), solidity_child(x, y).
.decl solidity_contract_body_error_declaration_c(x: SolidityContractBody, y: SolidityErrorDeclaration)
solidity_contract_body_error_declaration_c(x, as(y, SolidityErrorDeclaration)) :- solidity_contract_body(x), solidity_child(x, y).
.decl solidity_contract_body_event_definition_c(x: SolidityContractBody, y: SolidityEventDefinition)
solidity_contract_body_event_definition_c(x, as(y, SolidityEventDefinition)) :- solidity_contract_body(x), solidity_child(x, y).
.decl solidity_contract_body_fallback_receive_definition_c(x: SolidityContractBody, y: SolidityFallbackReceiveDefinition)
solidity_contract_body_fallback_receive_definition_c(x, as(y, SolidityFallbackReceiveDefinition)) :- solidity_contract_body(x), solidity_child(x, y).
.decl solidity_contract_body_function_definition_c(x: SolidityContractBody, y: SolidityFunctionDefinition)
solidity_contract_body_function_definition_c(x, as(y, SolidityFunctionDefinition)) :- solidity_contract_body(x), solidity_child(x, y).
.decl solidity_contract_body_modifier_definition_c(x: SolidityContractBody, y: SolidityModifierDefinition)
solidity_contract_body_modifier_definition_c(x, as(y, SolidityModifierDefinition)) :- solidity_contract_body(x), solidity_child(x, y).
.decl solidity_contract_body_state_variable_declaration_c(x: SolidityContractBody, y: SolidityStateVariableDeclaration)
solidity_contract_body_state_variable_declaration_c(x, as(y, SolidityStateVariableDeclaration)) :- solidity_contract_body(x), solidity_child(x, y).
.decl solidity_contract_body_struct_declaration_c(x: SolidityContractBody, y: SolidityStructDeclaration)
solidity_contract_body_struct_declaration_c(x, as(y, SolidityStructDeclaration)) :- solidity_contract_body(x), solidity_child(x, y).
.decl solidity_contract_body_user_defined_type_definition_c(x: SolidityContractBody, y: SolidityUserDefinedTypeDefinition)
solidity_contract_body_user_defined_type_definition_c(x, as(y, SolidityUserDefinedTypeDefinition)) :- solidity_contract_body(x), solidity_child(x, y).
.decl solidity_contract_body_using_directive_c(x: SolidityContractBody, y: SolidityUsingDirective)
solidity_contract_body_using_directive_c(x, as(y, SolidityUsingDirective)) :- solidity_contract_body(x), solidity_child(x, y).

.type SolidityContractDeclaration <: symbol
.decl solidity_contract_declaration(x: SolidityContractDeclaration)
solidity_contract_declaration(as(x, SolidityContractDeclaration)) :- solidity_node(x, "contract_declaration", _, _, _, _, _, _, _, _, _, _, _).
.decl solidity_contract_declaration_body_f(x: SolidityContractDeclaration, y: SolidityContractBody)
solidity_contract_declaration_body_f(x, as(y, SolidityContractBody)) :- solidity_contract_declaration(x), solidity_field(x, "body", y).
.decl solidity_contract_declaration_name_f(x: SolidityContractDeclaration, y: SolidityIdentifier)
solidity_contract_declaration_name_f(x, as(y, SolidityIdentifier)) :- solidity_contract_declaration(x), solidity_field(x, "name", y).
.decl solidity_contract_declaration_inheritance_specifier_c(x: SolidityContractDeclaration, y: SolidityInheritanceSpecifier)
solidity_contract_declaration_inheritance_specifier_c(x, as(y, SolidityInheritanceSpecifier)) :- solidity_contract_declaration(x), solidity_child(x, y).

.type SolidityDoWhileStatement <: symbol
.decl solidity_do_while_statement(x: SolidityDoWhileStatement)
solidity_do_while_statement(as(x, SolidityDoWhileStatement)) :- solidity_node(x, "do_while_statement", _, _, _, _, _, _, _, _, _, _, _).
.type SolidityFieldDoWhileStatementBody = SolidityAssemblyStatement | SolidityBlockStatement | SolidityBreakStatement | SolidityContinueStatement | SolidityDoWhileStatement | SolidityEmitStatement | SolidityExpressionStatement | SolidityForStatement | SolidityIfStatement | SolidityReturnStatement | SolidityRevertStatement | SolidityTryStatement | SolidityVariableDeclarationStatement | SolidityWhileStatement
.decl solidity_do_while_statement_body_f(x: SolidityDoWhileStatement, y: SolidityFieldDoWhileStatementBody)
solidity_do_while_statement_body_f(x, as(y, SolidityFieldDoWhileStatementBody)) :- solidity_do_while_statement(x), solidity_field(x, "body", y).
.type SolidityFieldDoWhileStatementCondition = SolidityArrayAccess | SolidityAssignmentExpression | SolidityAugmentedAssignmentExpression | SolidityBinaryExpression | SolidityBooleanLiteral | SolidityCallExpression | SolidityHexStringLiteral | SolidityIdentifier | SolidityInlineArrayExpression | SolidityMemberExpression | SolidityMetaTypeExpression | SolidityNewExpression | SolidityNumberLiteral | SolidityParenthesizedExpression | SolidityPayableConversionExpression | SolidityPrimitiveType | SoliditySliceAccess | SolidityStringLiteral | SolidityStructExpression | SolidityTernaryExpression | SolidityTupleExpression | SolidityTypeCastExpression | SolidityUnaryExpression | SolidityUnicodeStringLiteral | SolidityUpdateExpression | SolidityUserDefinedType
.decl solidity_do_while_statement_condition_f(x: SolidityDoWhileStatement, y: SolidityFieldDoWhileStatementCondition)
solidity_do_while_statement_condition_f(x, as(y, SolidityFieldDoWhileStatementCondition)) :- solidity_do_while_statement(x), solidity_field(x, "condition", y).

.type SolidityEmitStatement <: symbol
.decl solidity_emit_statement(x: SolidityEmitStatement)
solidity_emit_statement(as(x, SolidityEmitStatement)) :- solidity_node(x, "emit_statement", _, _, _, _, _, _, _, _, _, _, _).
.type SolidityFieldEmitStatementName = SolidityArrayAccess | SolidityAssignmentExpression | SolidityAugmentedAssignmentExpression | SolidityBinaryExpression | SolidityBooleanLiteral | SolidityCallExpression | SolidityHexStringLiteral | SolidityIdentifier | SolidityInlineArrayExpression | SolidityMemberExpression | SolidityMetaTypeExpression | SolidityNewExpression | SolidityNumberLiteral | SolidityParenthesizedExpression | SolidityPayableConversionExpression | SolidityPrimitiveType | SoliditySliceAccess | SolidityStringLiteral | SolidityStructExpression | SolidityTernaryExpression | SolidityTupleExpression | SolidityTypeCastExpression | SolidityUnaryExpression | SolidityUnicodeStringLiteral | SolidityUpdateExpression | SolidityUserDefinedType
.decl solidity_emit_statement_name_f(x: SolidityEmitStatement, y: SolidityFieldEmitStatementName)
solidity_emit_statement_name_f(x, as(y, SolidityFieldEmitStatementName)) :- solidity_emit_statement(x), solidity_field(x, "name", y).
.decl solidity_emit_statement_call_argument_c(x: SolidityEmitStatement, y: SolidityCallArgument)
solidity_emit_statement_call_argument_c(x, as(y, SolidityCallArgument)) :- solidity_emit_statement(x), solidity_child(x, y).

.type SolidityEnumDeclaration <: symbol
.decl solidity_enum_declaration(x: SolidityEnumDeclaration)
solidity_enum_declaration(as(x, SolidityEnumDeclaration)) :- solidity_node(x, "enum_declaration", _, _, _, _, _, _, _, _, _, _, _).
.decl solidity_enum_declaration_name_f(x: SolidityEnumDeclaration, y: SolidityIdentifier)
solidity_enum_declaration_name_f(x, as(y, SolidityIdentifier)) :- solidity_enum_declaration(x), solidity_field(x, "name", y).
.decl solidity_enum_declaration_enum_value_c(x: SolidityEnumDeclaration, y: SolidityEnumValue)
solidity_enum_declaration_enum_value_c(x, as(y, SolidityEnumValue)) :- solidity_enum_declaration(x), solidity_child(x, y).

.type SolidityErrorDeclaration <: symbol
.decl solidity_error_declaration(x: SolidityErrorDeclaration)
solidity_error_declaration(as(x, SolidityErrorDeclaration)) :- solidity_node(x, "error_declaration", _, _, _, _, _, _, _, _, _, _, _).
.decl solidity_error_declaration_name_f(x: SolidityErrorDeclaration, y: SolidityIdentifier)
solidity_error_declaration_name_f(x, as(y, SolidityIdentifier)) :- solidity_error_declaration(x), solidity_field(x, "name", y).
.decl solidity_error_declaration_error_parameter_c(x: SolidityErrorDeclaration, y: SolidityErrorParameter)
solidity_error_declaration_error_parameter_c(x, as(y, SolidityErrorParameter)) :- solidity_error_declaration(x), solidity_child(x, y).

.type SolidityErrorParameter <: symbol
.decl solidity_error_parameter(x: SolidityErrorParameter)
solidity_error_parameter(as(x, SolidityErrorParameter)) :- solidity_node(x, "error_parameter", _, _, _, _, _, _, _, _, _, _, _).
.decl solidity_error_parameter_name_f(x: SolidityErrorParameter, y: SolidityIdentifier)
solidity_error_parameter_name_f(x, as(y, SolidityIdentifier)) :- solidity_error_parameter(x), solidity_field(x, "name", y).
.decl solidity_error_parameter_type_f(x: SolidityErrorParameter, y: SolidityTypeName)
solidity_error_parameter_type_f(x, as(y, SolidityTypeName)) :- solidity_error_parameter(x), solidity_field(x, "type", y).

.type SolidityEventDefinition <: symbol
.decl solidity_event_definition(x: SolidityEventDefinition)
solidity_event_definition(as(x, SolidityEventDefinition)) :- solidity_node(x, "event_definition", _, _, _, _, _, _, _, _, _, _, _).
.decl solidity_event_definition_name_f(x: SolidityEventDefinition, y: SolidityIdentifier)
solidity_event_definition_name_f(x, as(y, SolidityIdentifier)) :- solidity_event_definition(x), solidity_field(x, "name", y).
.decl solidity_event_definition_event_paramater_c(x: SolidityEventDefinition, y: SolidityEventParamater)
solidity_event_definition_event_paramater_c(x, as(y, SolidityEventParamater)) :- solidity_event_definition(x), solidity_child(x, y).

.type SolidityEventParamater <: symbol
.decl solidity_event_paramater(x: SolidityEventParamater)
solidity_event_paramater(as(x, SolidityEventParamater)) :- solidity_node(x, "event_paramater", _, _, _, _, _, _, _, _, _, _, _).
.decl solidity_event_paramater_type_f(x: SolidityEventParamater, y: SolidityTypeName)
solidity_event_paramater_type_f(x, as(y, SolidityTypeName)) :- solidity_event_paramater(x), solidity_field(x, "type", y).
.decl solidity_event_paramater_name_f(x: SolidityEventParamater, y: SolidityIdentifier)
solidity_event_paramater_name_f(x, as(y, SolidityIdentifier)) :- solidity_event_paramater(x), solidity_field(x, "name", y).

.type SolidityExpressionStatement <: symbol
.decl solidity_expression_statement(x: SolidityExpressionStatement)
solidity_expression_statement(as(x, SolidityExpressionStatement)) :- solidity_node(x, "expression_statement", _, _, _, _, _, _, _, _, _, _, _).
.decl solidity_expression_statement_array_access_c(x: SolidityExpressionStatement, y: SolidityArrayAccess)
solidity_expression_statement_array_access_c(x, as(y, SolidityArrayAccess)) :- solidity_expression_statement(x), solidity_child(x, y).
.decl solidity_expression_statement_assignment_expression_c(x: SolidityExpressionStatement, y: SolidityAssignmentExpression)
solidity_expression_statement_assignment_expression_c(x, as(y, SolidityAssignmentExpression)) :- solidity_expression_statement(x), solidity_child(x, y).
.decl solidity_expression_statement_augmented_assignment_expression_c(x: SolidityExpressionStatement, y: SolidityAugmentedAssignmentExpression)
solidity_expression_statement_augmented_assignment_expression_c(x, as(y, SolidityAugmentedAssignmentExpression)) :- solidity_expression_statement(x), solidity_child(x, y).
.decl solidity_expression_statement_binary_expression_c(x: SolidityExpressionStatement, y: SolidityBinaryExpression)
solidity_expression_statement_binary_expression_c(x, as(y, SolidityBinaryExpression)) :- solidity_expression_statement(x), solidity_child(x, y).
.decl solidity_expression_statement_boolean_literal_c(x: SolidityExpressionStatement, y: SolidityBooleanLiteral)
solidity_expression_statement_boolean_literal_c(x, as(y, SolidityBooleanLiteral)) :- solidity_expression_statement(x), solidity_child(x, y).
.decl solidity_expression_statement_call_expression_c(x: SolidityExpressionStatement, y: SolidityCallExpression)
solidity_expression_statement_call_expression_c(x, as(y, SolidityCallExpression)) :- solidity_expression_statement(x), solidity_child(x, y).
.decl solidity_expression_statement_hex_string_literal_c(x: SolidityExpressionStatement, y: SolidityHexStringLiteral)
solidity_expression_statement_hex_string_literal_c(x, as(y, SolidityHexStringLiteral)) :- solidity_expression_statement(x), solidity_child(x, y).
.decl solidity_expression_statement_identifier_c(x: SolidityExpressionStatement, y: SolidityIdentifier)
solidity_expression_statement_identifier_c(x, as(y, SolidityIdentifier)) :- solidity_expression_statement(x), solidity_child(x, y).
.decl solidity_expression_statement_inline_array_expression_c(x: SolidityExpressionStatement, y: SolidityInlineArrayExpression)
solidity_expression_statement_inline_array_expression_c(x, as(y, SolidityInlineArrayExpression)) :- solidity_expression_statement(x), solidity_child(x, y).
.decl solidity_expression_statement_member_expression_c(x: SolidityExpressionStatement, y: SolidityMemberExpression)
solidity_expression_statement_member_expression_c(x, as(y, SolidityMemberExpression)) :- solidity_expression_statement(x), solidity_child(x, y).
.decl solidity_expression_statement_meta_type_expression_c(x: SolidityExpressionStatement, y: SolidityMetaTypeExpression)
solidity_expression_statement_meta_type_expression_c(x, as(y, SolidityMetaTypeExpression)) :- solidity_expression_statement(x), solidity_child(x, y).
.decl solidity_expression_statement_new_expression_c(x: SolidityExpressionStatement, y: SolidityNewExpression)
solidity_expression_statement_new_expression_c(x, as(y, SolidityNewExpression)) :- solidity_expression_statement(x), solidity_child(x, y).
.decl solidity_expression_statement_number_literal_c(x: SolidityExpressionStatement, y: SolidityNumberLiteral)
solidity_expression_statement_number_literal_c(x, as(y, SolidityNumberLiteral)) :- solidity_expression_statement(x), solidity_child(x, y).
.decl solidity_expression_statement_parenthesized_expression_c(x: SolidityExpressionStatement, y: SolidityParenthesizedExpression)
solidity_expression_statement_parenthesized_expression_c(x, as(y, SolidityParenthesizedExpression)) :- solidity_expression_statement(x), solidity_child(x, y).
.decl solidity_expression_statement_payable_conversion_expression_c(x: SolidityExpressionStatement, y: SolidityPayableConversionExpression)
solidity_expression_statement_payable_conversion_expression_c(x, as(y, SolidityPayableConversionExpression)) :- solidity_expression_statement(x), solidity_child(x, y).
.decl solidity_expression_statement_primitive_type_c(x: SolidityExpressionStatement, y: SolidityPrimitiveType)
solidity_expression_statement_primitive_type_c(x, as(y, SolidityPrimitiveType)) :- solidity_expression_statement(x), solidity_child(x, y).
.decl solidity_expression_statement_slice_access_c(x: SolidityExpressionStatement, y: SoliditySliceAccess)
solidity_expression_statement_slice_access_c(x, as(y, SoliditySliceAccess)) :- solidity_expression_statement(x), solidity_child(x, y).
.decl solidity_expression_statement_string_literal_c(x: SolidityExpressionStatement, y: SolidityStringLiteral)
solidity_expression_statement_string_literal_c(x, as(y, SolidityStringLiteral)) :- solidity_expression_statement(x), solidity_child(x, y).
.decl solidity_expression_statement_struct_expression_c(x: SolidityExpressionStatement, y: SolidityStructExpression)
solidity_expression_statement_struct_expression_c(x, as(y, SolidityStructExpression)) :- solidity_expression_statement(x), solidity_child(x, y).
.decl solidity_expression_statement_ternary_expression_c(x: SolidityExpressionStatement, y: SolidityTernaryExpression)
solidity_expression_statement_ternary_expression_c(x, as(y, SolidityTernaryExpression)) :- solidity_expression_statement(x), solidity_child(x, y).
.decl solidity_expression_statement_tuple_expression_c(x: SolidityExpressionStatement, y: SolidityTupleExpression)
solidity_expression_statement_tuple_expression_c(x, as(y, SolidityTupleExpression)) :- solidity_expression_statement(x), solidity_child(x, y).
.decl solidity_expression_statement_type_cast_expression_c(x: SolidityExpressionStatement, y: SolidityTypeCastExpression)
solidity_expression_statement_type_cast_expression_c(x, as(y, SolidityTypeCastExpression)) :- solidity_expression_statement(x), solidity_child(x, y).
.decl solidity_expression_statement_unary_expression_c(x: SolidityExpressionStatement, y: SolidityUnaryExpression)
solidity_expression_statement_unary_expression_c(x, as(y, SolidityUnaryExpression)) :- solidity_expression_statement(x), solidity_child(x, y).
.decl solidity_expression_statement_unicode_string_literal_c(x: SolidityExpressionStatement, y: SolidityUnicodeStringLiteral)
solidity_expression_statement_unicode_string_literal_c(x, as(y, SolidityUnicodeStringLiteral)) :- solidity_expression_statement(x), solidity_child(x, y).
.decl solidity_expression_statement_update_expression_c(x: SolidityExpressionStatement, y: SolidityUpdateExpression)
solidity_expression_statement_update_expression_c(x, as(y, SolidityUpdateExpression)) :- solidity_expression_statement(x), solidity_child(x, y).
.decl solidity_expression_statement_user_defined_type_c(x: SolidityExpressionStatement, y: SolidityUserDefinedType)
solidity_expression_statement_user_defined_type_c(x, as(y, SolidityUserDefinedType)) :- solidity_expression_statement(x), solidity_child(x, y).

.type SolidityFallbackReceiveDefinition <: symbol
.decl solidity_fallback_receive_definition(x: SolidityFallbackReceiveDefinition)
solidity_fallback_receive_definition(as(x, SolidityFallbackReceiveDefinition)) :- solidity_node(x, "fallback_receive_definition", _, _, _, _, _, _, _, _, _, _, _).
.decl solidity_fallback_receive_definition_body_f(x: SolidityFallbackReceiveDefinition, y: SolidityFunctionBody)
solidity_fallback_receive_definition_body_f(x, as(y, SolidityFunctionBody)) :- solidity_fallback_receive_definition(x), solidity_field(x, "body", y).
.decl solidity_fallback_receive_definition_modifier_invocation_c(x: SolidityFallbackReceiveDefinition, y: SolidityModifierInvocation)
solidity_fallback_receive_definition_modifier_invocation_c(x, as(y, SolidityModifierInvocation)) :- solidity_fallback_receive_definition(x), solidity_child(x, y).
.decl solidity_fallback_receive_definition_override_specifier_c(x: SolidityFallbackReceiveDefinition, y: SolidityOverrideSpecifier)
solidity_fallback_receive_definition_override_specifier_c(x, as(y, SolidityOverrideSpecifier)) :- solidity_fallback_receive_definition(x), solidity_child(x, y).
.decl solidity_fallback_receive_definition_parameter_c(x: SolidityFallbackReceiveDefinition, y: SolidityParameter)
solidity_fallback_receive_definition_parameter_c(x, as(y, SolidityParameter)) :- solidity_fallback_receive_definition(x), solidity_child(x, y).
.decl solidity_fallback_receive_definition_state_mutability_c(x: SolidityFallbackReceiveDefinition, y: SolidityStateMutability)
solidity_fallback_receive_definition_state_mutability_c(x, as(y, SolidityStateMutability)) :- solidity_fallback_receive_definition(x), solidity_child(x, y).
.decl solidity_fallback_receive_definition_virtual_c(x: SolidityFallbackReceiveDefinition, y: SolidityVirtual)
solidity_fallback_receive_definition_virtual_c(x, as(y, SolidityVirtual)) :- solidity_fallback_receive_definition(x), solidity_child(x, y).
.decl solidity_fallback_receive_definition_visibility_c(x: SolidityFallbackReceiveDefinition, y: SolidityVisibility)
solidity_fallback_receive_definition_visibility_c(x, as(y, SolidityVisibility)) :- solidity_fallback_receive_definition(x), solidity_child(x, y).

.type SolidityFalse <: symbol
.decl solidity_false(x: SolidityFalse)
solidity_false(as(x, SolidityFalse)) :- solidity_node(x, "false", _, _, _, _, _, _, _, _, _, _, _).

.type SolidityForStatement <: symbol
.decl solidity_for_statement(x: SolidityForStatement)
solidity_for_statement(as(x, SolidityForStatement)) :- solidity_node(x, "for_statement", _, _, _, _, _, _, _, _, _, _, _).
.type SolidityFieldForStatementUpdate = SolidityArrayAccess | SolidityAssignmentExpression | SolidityAugmentedAssignmentExpression | SolidityBinaryExpression | SolidityBooleanLiteral | SolidityCallExpression | SolidityHexStringLiteral | SolidityIdentifier | SolidityInlineArrayExpression | SolidityMemberExpression | SolidityMetaTypeExpression | SolidityNewExpression | SolidityNumberLiteral | SolidityParenthesizedExpression | SolidityPayableConversionExpression | SolidityPrimitiveType | SoliditySliceAccess | SolidityStringLiteral | SolidityStructExpression | SolidityTernaryExpression | SolidityTupleExpression | SolidityTypeCastExpression | SolidityUnaryExpression | SolidityUnicodeStringLiteral | SolidityUpdateExpression | SolidityUserDefinedType
.decl solidity_for_statement_update_f(x: SolidityForStatement, y: SolidityFieldForStatementUpdate)
solidity_for_statement_update_f(x, as(y, SolidityFieldForStatementUpdate)) :- solidity_for_statement(x), solidity_field(x, "update", y).
.type SolidityFieldForStatementBody = SolidityAssemblyStatement | SolidityBlockStatement | SolidityBreakStatement | SolidityContinueStatement | SolidityDoWhileStatement | SolidityEmitStatement | SolidityExpressionStatement | SolidityForStatement | SolidityIfStatement | SolidityReturnStatement | SolidityRevertStatement | SolidityTryStatement | SolidityVariableDeclarationStatement | SolidityWhileStatement
.decl solidity_for_statement_body_f(x: SolidityForStatement, y: SolidityFieldForStatementBody)
solidity_for_statement_body_f(x, as(y, SolidityFieldForStatementBody)) :- solidity_for_statement(x), solidity_field(x, "body", y).
.decl solidity_for_statement_condition_f(x: SolidityForStatement, y: SolidityExpressionStatement)
solidity_for_statement_condition_f(x, as(y, SolidityExpressionStatement)) :- solidity_for_statement(x), solidity_field(x, "condition", y).
.type SolidityFieldForStatementInitial = SolidityExpressionStatement | SolidityVariableDeclarationStatement
.decl solidity_for_statement_initial_f(x: SolidityForStatement, y: SolidityFieldForStatementInitial)
solidity_for_statement_initial_f(x, as(y, SolidityFieldForStatementInitial)) :- solidity_for_statement(x), solidity_field(x, "initial", y).

.type SolidityFunctionBody <: symbol
.decl solidity_function_body(x: SolidityFunctionBody)
solidity_function_body(as(x, SolidityFunctionBody)) :- solidity_node(x, "function_body", _, _, _, _, _, _, _, _, _, _, _).
.decl solidity_function_body_assembly_statement_c(x: SolidityFunctionBody, y: SolidityAssemblyStatement)
solidity_function_body_assembly_statement_c(x, as(y, SolidityAssemblyStatement)) :- solidity_function_body(x), solidity_child(x, y).
.decl solidity_function_body_block_statement_c(x: SolidityFunctionBody, y: SolidityBlockStatement)
solidity_function_body_block_statement_c(x, as(y, SolidityBlockStatement)) :- solidity_function_body(x), solidity_child(x, y).
.decl solidity_function_body_break_statement_c(x: SolidityFunctionBody, y: SolidityBreakStatement)
solidity_function_body_break_statement_c(x, as(y, SolidityBreakStatement)) :- solidity_function_body(x), solidity_child(x, y).
.decl solidity_function_body_continue_statement_c(x: SolidityFunctionBody, y: SolidityContinueStatement)
solidity_function_body_continue_statement_c(x, as(y, SolidityContinueStatement)) :- solidity_function_body(x), solidity_child(x, y).
.decl solidity_function_body_do_while_statement_c(x: SolidityFunctionBody, y: SolidityDoWhileStatement)
solidity_function_body_do_while_statement_c(x, as(y, SolidityDoWhileStatement)) :- solidity_function_body(x), solidity_child(x, y).
.decl solidity_function_body_emit_statement_c(x: SolidityFunctionBody, y: SolidityEmitStatement)
solidity_function_body_emit_statement_c(x, as(y, SolidityEmitStatement)) :- solidity_function_body(x), solidity_child(x, y).
.decl solidity_function_body_expression_statement_c(x: SolidityFunctionBody, y: SolidityExpressionStatement)
solidity_function_body_expression_statement_c(x, as(y, SolidityExpressionStatement)) :- solidity_function_body(x), solidity_child(x, y).
.decl solidity_function_body_for_statement_c(x: SolidityFunctionBody, y: SolidityForStatement)
solidity_function_body_for_statement_c(x, as(y, SolidityForStatement)) :- solidity_function_body(x), solidity_child(x, y).
.decl solidity_function_body_if_statement_c(x: SolidityFunctionBody, y: SolidityIfStatement)
solidity_function_body_if_statement_c(x, as(y, SolidityIfStatement)) :- solidity_function_body(x), solidity_child(x, y).
.decl solidity_function_body_return_statement_c(x: SolidityFunctionBody, y: SolidityReturnStatement)
solidity_function_body_return_statement_c(x, as(y, SolidityReturnStatement)) :- solidity_function_body(x), solidity_child(x, y).
.decl solidity_function_body_revert_statement_c(x: SolidityFunctionBody, y: SolidityRevertStatement)
solidity_function_body_revert_statement_c(x, as(y, SolidityRevertStatement)) :- solidity_function_body(x), solidity_child(x, y).
.decl solidity_function_body_try_statement_c(x: SolidityFunctionBody, y: SolidityTryStatement)
solidity_function_body_try_statement_c(x, as(y, SolidityTryStatement)) :- solidity_function_body(x), solidity_child(x, y).
.decl solidity_function_body_variable_declaration_statement_c(x: SolidityFunctionBody, y: SolidityVariableDeclarationStatement)
solidity_function_body_variable_declaration_statement_c(x, as(y, SolidityVariableDeclarationStatement)) :- solidity_function_body(x), solidity_child(x, y).
.decl solidity_function_body_while_statement_c(x: SolidityFunctionBody, y: SolidityWhileStatement)
solidity_function_body_while_statement_c(x, as(y, SolidityWhileStatement)) :- solidity_function_body(x), solidity_child(x, y).

.type SolidityFunctionDefinition <: symbol
.decl solidity_function_definition(x: SolidityFunctionDefinition)
solidity_function_definition(as(x, SolidityFunctionDefinition)) :- solidity_node(x, "function_definition", _, _, _, _, _, _, _, _, _, _, _).
.decl solidity_function_definition_name_f(x: SolidityFunctionDefinition, y: SolidityIdentifier)
solidity_function_definition_name_f(x, as(y, SolidityIdentifier)) :- solidity_function_definition(x), solidity_field(x, "name", y).
.decl solidity_function_definition_return_type_f(x: SolidityFunctionDefinition, y: SolidityReturnTypeDefinition)
solidity_function_definition_return_type_f(x, as(y, SolidityReturnTypeDefinition)) :- solidity_function_definition(x), solidity_field(x, "return_type", y).
.decl solidity_function_definition_body_f(x: SolidityFunctionDefinition, y: SolidityFunctionBody)
solidity_function_definition_body_f(x, as(y, SolidityFunctionBody)) :- solidity_function_definition(x), solidity_field(x, "body", y).
.decl solidity_function_definition_modifier_invocation_c(x: SolidityFunctionDefinition, y: SolidityModifierInvocation)
solidity_function_definition_modifier_invocation_c(x, as(y, SolidityModifierInvocation)) :- solidity_function_definition(x), solidity_child(x, y).
.decl solidity_function_definition_override_specifier_c(x: SolidityFunctionDefinition, y: SolidityOverrideSpecifier)
solidity_function_definition_override_specifier_c(x, as(y, SolidityOverrideSpecifier)) :- solidity_function_definition(x), solidity_child(x, y).
.decl solidity_function_definition_parameter_c(x: SolidityFunctionDefinition, y: SolidityParameter)
solidity_function_definition_parameter_c(x, as(y, SolidityParameter)) :- solidity_function_definition(x), solidity_child(x, y).
.decl solidity_function_definition_state_mutability_c(x: SolidityFunctionDefinition, y: SolidityStateMutability)
solidity_function_definition_state_mutability_c(x, as(y, SolidityStateMutability)) :- solidity_function_definition(x), solidity_child(x, y).
.decl solidity_function_definition_virtual_c(x: SolidityFunctionDefinition, y: SolidityVirtual)
solidity_function_definition_virtual_c(x, as(y, SolidityVirtual)) :- solidity_function_definition(x), solidity_child(x, y).
.decl solidity_function_definition_visibility_c(x: SolidityFunctionDefinition, y: SolidityVisibility)
solidity_function_definition_visibility_c(x, as(y, SolidityVisibility)) :- solidity_function_definition(x), solidity_child(x, y).

.type SolidityHexStringLiteral <: symbol
.decl solidity_hex_string_literal(x: SolidityHexStringLiteral)
solidity_hex_string_literal(as(x, SolidityHexStringLiteral)) :- solidity_node(x, "hex_string_literal", _, _, _, _, _, _, _, _, _, _, _).

.type SolidityIfStatement <: symbol
.decl solidity_if_statement(x: SolidityIfStatement)
solidity_if_statement(as(x, SolidityIfStatement)) :- solidity_node(x, "if_statement", _, _, _, _, _, _, _, _, _, _, _).
.type SolidityFieldIfStatementCondition = SolidityArrayAccess | SolidityAssignmentExpression | SolidityAugmentedAssignmentExpression | SolidityBinaryExpression | SolidityBooleanLiteral | SolidityCallExpression | SolidityHexStringLiteral | SolidityIdentifier | SolidityInlineArrayExpression | SolidityMemberExpression | SolidityMetaTypeExpression | SolidityNewExpression | SolidityNumberLiteral | SolidityParenthesizedExpression | SolidityPayableConversionExpression | SolidityPrimitiveType | SoliditySliceAccess | SolidityStringLiteral | SolidityStructExpression | SolidityTernaryExpression | SolidityTupleExpression | SolidityTypeCastExpression | SolidityUnaryExpression | SolidityUnicodeStringLiteral | SolidityUpdateExpression | SolidityUserDefinedType
.decl solidity_if_statement_condition_f(x: SolidityIfStatement, y: SolidityFieldIfStatementCondition)
solidity_if_statement_condition_f(x, as(y, SolidityFieldIfStatementCondition)) :- solidity_if_statement(x), solidity_field(x, "condition", y).
.type SolidityFieldIfStatementBody = SolidityAssemblyStatement | SolidityBlockStatement | SolidityBreakStatement | SolidityContinueStatement | SolidityDoWhileStatement | SolidityEmitStatement | SolidityExpressionStatement | SolidityForStatement | SolidityIfStatement | SolidityReturnStatement | SolidityRevertStatement | SolidityTryStatement | SolidityVariableDeclarationStatement | SolidityWhileStatement
.decl solidity_if_statement_body_f(x: SolidityIfStatement, y: SolidityFieldIfStatementBody)
solidity_if_statement_body_f(x, as(y, SolidityFieldIfStatementBody)) :- solidity_if_statement(x), solidity_field(x, "body", y).

.type SolidityImportDirective <: symbol
.decl solidity_import_directive(x: SolidityImportDirective)
solidity_import_directive(as(x, SolidityImportDirective)) :- solidity_node(x, "import_directive", _, _, _, _, _, _, _, _, _, _, _).
.decl solidity_import_directive_import_name_f(x: SolidityImportDirective, y: SolidityIdentifier)
solidity_import_directive_import_name_f(x, as(y, SolidityIdentifier)) :- solidity_import_directive(x), solidity_field(x, "import_name", y).
.decl solidity_import_directive_source_f(x: SolidityImportDirective, y: SolidityString)
solidity_import_directive_source_f(x, as(y, SolidityString)) :- solidity_import_directive(x), solidity_field(x, "source", y).
.decl solidity_import_directive_alias_f(x: SolidityImportDirective, y: SolidityIdentifier)
solidity_import_directive_alias_f(x, as(y, SolidityIdentifier)) :- solidity_import_directive(x), solidity_field(x, "alias", y).

.type SolidityInheritanceSpecifier <: symbol
.decl solidity_inheritance_specifier(x: SolidityInheritanceSpecifier)
solidity_inheritance_specifier(as(x, SolidityInheritanceSpecifier)) :- solidity_node(x, "inheritance_specifier", _, _, _, _, _, _, _, _, _, _, _).
.decl solidity_inheritance_specifier_ancestor_f(x: SolidityInheritanceSpecifier, y: SolidityUserDefinedType)
solidity_inheritance_specifier_ancestor_f(x, as(y, SolidityUserDefinedType)) :- solidity_inheritance_specifier(x), solidity_field(x, "ancestor", y).
.decl solidity_inheritance_specifier_ancestor_arguments_f(x: SolidityInheritanceSpecifier, y: SolidityCallArgument)
solidity_inheritance_specifier_ancestor_arguments_f(x, as(y, SolidityCallArgument)) :- solidity_inheritance_specifier(x), solidity_field(x, "ancestor_arguments", y).

.type SolidityInlineArrayExpression <: symbol
.decl solidity_inline_array_expression(x: SolidityInlineArrayExpression)
solidity_inline_array_expression(as(x, SolidityInlineArrayExpression)) :- solidity_node(x, "inline_array_expression", _, _, _, _, _, _, _, _, _, _, _).
.decl solidity_inline_array_expression_array_access_c(x: SolidityInlineArrayExpression, y: SolidityArrayAccess)
solidity_inline_array_expression_array_access_c(x, as(y, SolidityArrayAccess)) :- solidity_inline_array_expression(x), solidity_child(x, y).
.decl solidity_inline_array_expression_assignment_expression_c(x: SolidityInlineArrayExpression, y: SolidityAssignmentExpression)
solidity_inline_array_expression_assignment_expression_c(x, as(y, SolidityAssignmentExpression)) :- solidity_inline_array_expression(x), solidity_child(x, y).
.decl solidity_inline_array_expression_augmented_assignment_expression_c(x: SolidityInlineArrayExpression, y: SolidityAugmentedAssignmentExpression)
solidity_inline_array_expression_augmented_assignment_expression_c(x, as(y, SolidityAugmentedAssignmentExpression)) :- solidity_inline_array_expression(x), solidity_child(x, y).
.decl solidity_inline_array_expression_binary_expression_c(x: SolidityInlineArrayExpression, y: SolidityBinaryExpression)
solidity_inline_array_expression_binary_expression_c(x, as(y, SolidityBinaryExpression)) :- solidity_inline_array_expression(x), solidity_child(x, y).
.decl solidity_inline_array_expression_boolean_literal_c(x: SolidityInlineArrayExpression, y: SolidityBooleanLiteral)
solidity_inline_array_expression_boolean_literal_c(x, as(y, SolidityBooleanLiteral)) :- solidity_inline_array_expression(x), solidity_child(x, y).
.decl solidity_inline_array_expression_call_expression_c(x: SolidityInlineArrayExpression, y: SolidityCallExpression)
solidity_inline_array_expression_call_expression_c(x, as(y, SolidityCallExpression)) :- solidity_inline_array_expression(x), solidity_child(x, y).
.decl solidity_inline_array_expression_hex_string_literal_c(x: SolidityInlineArrayExpression, y: SolidityHexStringLiteral)
solidity_inline_array_expression_hex_string_literal_c(x, as(y, SolidityHexStringLiteral)) :- solidity_inline_array_expression(x), solidity_child(x, y).
.decl solidity_inline_array_expression_identifier_c(x: SolidityInlineArrayExpression, y: SolidityIdentifier)
solidity_inline_array_expression_identifier_c(x, as(y, SolidityIdentifier)) :- solidity_inline_array_expression(x), solidity_child(x, y).
.decl solidity_inline_array_expression_inline_array_expression_c(x: SolidityInlineArrayExpression, y: SolidityInlineArrayExpression)
solidity_inline_array_expression_inline_array_expression_c(x, as(y, SolidityInlineArrayExpression)) :- solidity_inline_array_expression(x), solidity_child(x, y).
.decl solidity_inline_array_expression_member_expression_c(x: SolidityInlineArrayExpression, y: SolidityMemberExpression)
solidity_inline_array_expression_member_expression_c(x, as(y, SolidityMemberExpression)) :- solidity_inline_array_expression(x), solidity_child(x, y).
.decl solidity_inline_array_expression_meta_type_expression_c(x: SolidityInlineArrayExpression, y: SolidityMetaTypeExpression)
solidity_inline_array_expression_meta_type_expression_c(x, as(y, SolidityMetaTypeExpression)) :- solidity_inline_array_expression(x), solidity_child(x, y).
.decl solidity_inline_array_expression_new_expression_c(x: SolidityInlineArrayExpression, y: SolidityNewExpression)
solidity_inline_array_expression_new_expression_c(x, as(y, SolidityNewExpression)) :- solidity_inline_array_expression(x), solidity_child(x, y).
.decl solidity_inline_array_expression_number_literal_c(x: SolidityInlineArrayExpression, y: SolidityNumberLiteral)
solidity_inline_array_expression_number_literal_c(x, as(y, SolidityNumberLiteral)) :- solidity_inline_array_expression(x), solidity_child(x, y).
.decl solidity_inline_array_expression_parenthesized_expression_c(x: SolidityInlineArrayExpression, y: SolidityParenthesizedExpression)
solidity_inline_array_expression_parenthesized_expression_c(x, as(y, SolidityParenthesizedExpression)) :- solidity_inline_array_expression(x), solidity_child(x, y).
.decl solidity_inline_array_expression_payable_conversion_expression_c(x: SolidityInlineArrayExpression, y: SolidityPayableConversionExpression)
solidity_inline_array_expression_payable_conversion_expression_c(x, as(y, SolidityPayableConversionExpression)) :- solidity_inline_array_expression(x), solidity_child(x, y).
.decl solidity_inline_array_expression_primitive_type_c(x: SolidityInlineArrayExpression, y: SolidityPrimitiveType)
solidity_inline_array_expression_primitive_type_c(x, as(y, SolidityPrimitiveType)) :- solidity_inline_array_expression(x), solidity_child(x, y).
.decl solidity_inline_array_expression_slice_access_c(x: SolidityInlineArrayExpression, y: SoliditySliceAccess)
solidity_inline_array_expression_slice_access_c(x, as(y, SoliditySliceAccess)) :- solidity_inline_array_expression(x), solidity_child(x, y).
.decl solidity_inline_array_expression_string_literal_c(x: SolidityInlineArrayExpression, y: SolidityStringLiteral)
solidity_inline_array_expression_string_literal_c(x, as(y, SolidityStringLiteral)) :- solidity_inline_array_expression(x), solidity_child(x, y).
.decl solidity_inline_array_expression_struct_expression_c(x: SolidityInlineArrayExpression, y: SolidityStructExpression)
solidity_inline_array_expression_struct_expression_c(x, as(y, SolidityStructExpression)) :- solidity_inline_array_expression(x), solidity_child(x, y).
.decl solidity_inline_array_expression_ternary_expression_c(x: SolidityInlineArrayExpression, y: SolidityTernaryExpression)
solidity_inline_array_expression_ternary_expression_c(x, as(y, SolidityTernaryExpression)) :- solidity_inline_array_expression(x), solidity_child(x, y).
.decl solidity_inline_array_expression_tuple_expression_c(x: SolidityInlineArrayExpression, y: SolidityTupleExpression)
solidity_inline_array_expression_tuple_expression_c(x, as(y, SolidityTupleExpression)) :- solidity_inline_array_expression(x), solidity_child(x, y).
.decl solidity_inline_array_expression_type_cast_expression_c(x: SolidityInlineArrayExpression, y: SolidityTypeCastExpression)
solidity_inline_array_expression_type_cast_expression_c(x, as(y, SolidityTypeCastExpression)) :- solidity_inline_array_expression(x), solidity_child(x, y).
.decl solidity_inline_array_expression_unary_expression_c(x: SolidityInlineArrayExpression, y: SolidityUnaryExpression)
solidity_inline_array_expression_unary_expression_c(x, as(y, SolidityUnaryExpression)) :- solidity_inline_array_expression(x), solidity_child(x, y).
.decl solidity_inline_array_expression_unicode_string_literal_c(x: SolidityInlineArrayExpression, y: SolidityUnicodeStringLiteral)
solidity_inline_array_expression_unicode_string_literal_c(x, as(y, SolidityUnicodeStringLiteral)) :- solidity_inline_array_expression(x), solidity_child(x, y).
.decl solidity_inline_array_expression_update_expression_c(x: SolidityInlineArrayExpression, y: SolidityUpdateExpression)
solidity_inline_array_expression_update_expression_c(x, as(y, SolidityUpdateExpression)) :- solidity_inline_array_expression(x), solidity_child(x, y).
.decl solidity_inline_array_expression_user_defined_type_c(x: SolidityInlineArrayExpression, y: SolidityUserDefinedType)
solidity_inline_array_expression_user_defined_type_c(x, as(y, SolidityUserDefinedType)) :- solidity_inline_array_expression(x), solidity_child(x, y).

.type SolidityInterfaceDeclaration <: symbol
.decl solidity_interface_declaration(x: SolidityInterfaceDeclaration)
solidity_interface_declaration(as(x, SolidityInterfaceDeclaration)) :- solidity_node(x, "interface_declaration", _, _, _, _, _, _, _, _, _, _, _).
.decl solidity_interface_declaration_body_f(x: SolidityInterfaceDeclaration, y: SolidityContractBody)
solidity_interface_declaration_body_f(x, as(y, SolidityContractBody)) :- solidity_interface_declaration(x), solidity_field(x, "body", y).
.decl solidity_interface_declaration_name_f(x: SolidityInterfaceDeclaration, y: SolidityIdentifier)
solidity_interface_declaration_name_f(x, as(y, SolidityIdentifier)) :- solidity_interface_declaration(x), solidity_field(x, "name", y).
.decl solidity_interface_declaration_inheritance_specifier_c(x: SolidityInterfaceDeclaration, y: SolidityInheritanceSpecifier)
solidity_interface_declaration_inheritance_specifier_c(x, as(y, SolidityInheritanceSpecifier)) :- solidity_interface_declaration(x), solidity_child(x, y).

.type SolidityLibraryDeclaration <: symbol
.decl solidity_library_declaration(x: SolidityLibraryDeclaration)
solidity_library_declaration(as(x, SolidityLibraryDeclaration)) :- solidity_node(x, "library_declaration", _, _, _, _, _, _, _, _, _, _, _).
.decl solidity_library_declaration_body_f(x: SolidityLibraryDeclaration, y: SolidityContractBody)
solidity_library_declaration_body_f(x, as(y, SolidityContractBody)) :- solidity_library_declaration(x), solidity_field(x, "body", y).
.decl solidity_library_declaration_name_f(x: SolidityLibraryDeclaration, y: SolidityIdentifier)
solidity_library_declaration_name_f(x, as(y, SolidityIdentifier)) :- solidity_library_declaration(x), solidity_field(x, "name", y).

.type SolidityMemberExpression <: symbol
.decl solidity_member_expression(x: SolidityMemberExpression)
solidity_member_expression(as(x, SolidityMemberExpression)) :- solidity_node(x, "member_expression", _, _, _, _, _, _, _, _, _, _, _).
.decl solidity_member_expression_property_f(x: SolidityMemberExpression, y: SolidityIdentifier)
solidity_member_expression_property_f(x, as(y, SolidityIdentifier)) :- solidity_member_expression(x), solidity_field(x, "property", y).
.type SolidityFieldMemberExpressionObject = SolidityArrayAccess | SolidityAssignmentExpression | SolidityAugmentedAssignmentExpression | SolidityBinaryExpression | SolidityBooleanLiteral | SolidityCallExpression | SolidityHexStringLiteral | SolidityIdentifier | SolidityInlineArrayExpression | SolidityMemberExpression | SolidityMetaTypeExpression | SolidityNewExpression | SolidityNumberLiteral | SolidityParenthesizedExpression | SolidityPayableConversionExpression | SolidityPrimitiveType | SoliditySliceAccess | SolidityStringLiteral | SolidityStructExpression | SolidityTernaryExpression | SolidityTupleExpression | SolidityTypeCastExpression | SolidityUnaryExpression | SolidityUnicodeStringLiteral | SolidityUpdateExpression | SolidityUserDefinedType
.decl solidity_member_expression_object_f(x: SolidityMemberExpression, y: SolidityFieldMemberExpressionObject)
solidity_member_expression_object_f(x, as(y, SolidityFieldMemberExpressionObject)) :- solidity_member_expression(x), solidity_field(x, "object", y).

.type SolidityMetaTypeExpression <: symbol
.decl solidity_meta_type_expression(x: SolidityMetaTypeExpression)
solidity_meta_type_expression(as(x, SolidityMetaTypeExpression)) :- solidity_node(x, "meta_type_expression", _, _, _, _, _, _, _, _, _, _, _).
.decl solidity_meta_type_expression_type_name_c(x: SolidityMetaTypeExpression, y: SolidityTypeName)
solidity_meta_type_expression_type_name_c(x, as(y, SolidityTypeName)) :- solidity_meta_type_expression(x), solidity_child(x, y).

.type SolidityModifierDefinition <: symbol
.decl solidity_modifier_definition(x: SolidityModifierDefinition)
solidity_modifier_definition(as(x, SolidityModifierDefinition)) :- solidity_node(x, "modifier_definition", _, _, _, _, _, _, _, _, _, _, _).
.decl solidity_modifier_definition_body_f(x: SolidityModifierDefinition, y: SolidityFunctionBody)
solidity_modifier_definition_body_f(x, as(y, SolidityFunctionBody)) :- solidity_modifier_definition(x), solidity_field(x, "body", y).
.decl solidity_modifier_definition_name_f(x: SolidityModifierDefinition, y: SolidityIdentifier)
solidity_modifier_definition_name_f(x, as(y, SolidityIdentifier)) :- solidity_modifier_definition(x), solidity_field(x, "name", y).
.decl solidity_modifier_definition_override_specifier_c(x: SolidityModifierDefinition, y: SolidityOverrideSpecifier)
solidity_modifier_definition_override_specifier_c(x, as(y, SolidityOverrideSpecifier)) :- solidity_modifier_definition(x), solidity_child(x, y).
.decl solidity_modifier_definition_parameter_c(x: SolidityModifierDefinition, y: SolidityParameter)
solidity_modifier_definition_parameter_c(x, as(y, SolidityParameter)) :- solidity_modifier_definition(x), solidity_child(x, y).
.decl solidity_modifier_definition_virtual_c(x: SolidityModifierDefinition, y: SolidityVirtual)
solidity_modifier_definition_virtual_c(x, as(y, SolidityVirtual)) :- solidity_modifier_definition(x), solidity_child(x, y).

.type SolidityModifierInvocation <: symbol
.decl solidity_modifier_invocation(x: SolidityModifierInvocation)
solidity_modifier_invocation(as(x, SolidityModifierInvocation)) :- solidity_node(x, "modifier_invocation", _, _, _, _, _, _, _, _, _, _, _).
.decl solidity_modifier_invocation_call_argument_c(x: SolidityModifierInvocation, y: SolidityCallArgument)
solidity_modifier_invocation_call_argument_c(x, as(y, SolidityCallArgument)) :- solidity_modifier_invocation(x), solidity_child(x, y).
.decl solidity_modifier_invocation_identifier_c(x: SolidityModifierInvocation, y: SolidityIdentifier)
solidity_modifier_invocation_identifier_c(x, as(y, SolidityIdentifier)) :- solidity_modifier_invocation(x), solidity_child(x, y).

.type SolidityNewExpression <: symbol
.decl solidity_new_expression(x: SolidityNewExpression)
solidity_new_expression(as(x, SolidityNewExpression)) :- solidity_node(x, "new_expression", _, _, _, _, _, _, _, _, _, _, _).
.decl solidity_new_expression_name_f(x: SolidityNewExpression, y: SolidityTypeName)
solidity_new_expression_name_f(x, as(y, SolidityTypeName)) :- solidity_new_expression(x), solidity_field(x, "name", y).
.decl solidity_new_expression_call_argument_c(x: SolidityNewExpression, y: SolidityCallArgument)
solidity_new_expression_call_argument_c(x, as(y, SolidityCallArgument)) :- solidity_new_expression(x), solidity_child(x, y).

.type SolidityNumberLiteral <: symbol
.decl solidity_number_literal(x: SolidityNumberLiteral)
solidity_number_literal(as(x, SolidityNumberLiteral)) :- solidity_node(x, "number_literal", _, _, _, _, _, _, _, _, _, _, _).
.decl solidity_number_literal_number_unit_c(x: SolidityNumberLiteral, y: SolidityNumberUnit)
solidity_number_literal_number_unit_c(x, as(y, SolidityNumberUnit)) :- solidity_number_literal(x), solidity_child(x, y).

.type SolidityNumberUnit <: symbol
.decl solidity_number_unit(x: SolidityNumberUnit)
solidity_number_unit(as(x, SolidityNumberUnit)) :- solidity_node(x, "number_unit", _, _, _, _, _, _, _, _, _, _, _).

.type SolidityOverrideSpecifier <: symbol
.decl solidity_override_specifier(x: SolidityOverrideSpecifier)
solidity_override_specifier(as(x, SolidityOverrideSpecifier)) :- solidity_node(x, "override_specifier", _, _, _, _, _, _, _, _, _, _, _).
.decl solidity_override_specifier_user_defined_type_c(x: SolidityOverrideSpecifier, y: SolidityUserDefinedType)
solidity_override_specifier_user_defined_type_c(x, as(y, SolidityUserDefinedType)) :- solidity_override_specifier(x), solidity_child(x, y).

.type SolidityParameter <: symbol
.decl solidity_parameter(x: SolidityParameter)
solidity_parameter(as(x, SolidityParameter)) :- solidity_node(x, "parameter", _, _, _, _, _, _, _, _, _, _, _).
.decl solidity_parameter_name_f(x: SolidityParameter, y: SolidityIdentifier)
solidity_parameter_name_f(x, as(y, SolidityIdentifier)) :- solidity_parameter(x), solidity_field(x, "name", y).
.decl solidity_parameter_type_f(x: SolidityParameter, y: SolidityTypeName)
solidity_parameter_type_f(x, as(y, SolidityTypeName)) :- solidity_parameter(x), solidity_field(x, "type", y).

.type SolidityParenthesizedExpression <: symbol
.decl solidity_parenthesized_expression(x: SolidityParenthesizedExpression)
solidity_parenthesized_expression(as(x, SolidityParenthesizedExpression)) :- solidity_node(x, "parenthesized_expression", _, _, _, _, _, _, _, _, _, _, _).
.decl solidity_parenthesized_expression_array_access_c(x: SolidityParenthesizedExpression, y: SolidityArrayAccess)
solidity_parenthesized_expression_array_access_c(x, as(y, SolidityArrayAccess)) :- solidity_parenthesized_expression(x), solidity_child(x, y).
.decl solidity_parenthesized_expression_assignment_expression_c(x: SolidityParenthesizedExpression, y: SolidityAssignmentExpression)
solidity_parenthesized_expression_assignment_expression_c(x, as(y, SolidityAssignmentExpression)) :- solidity_parenthesized_expression(x), solidity_child(x, y).
.decl solidity_parenthesized_expression_augmented_assignment_expression_c(x: SolidityParenthesizedExpression, y: SolidityAugmentedAssignmentExpression)
solidity_parenthesized_expression_augmented_assignment_expression_c(x, as(y, SolidityAugmentedAssignmentExpression)) :- solidity_parenthesized_expression(x), solidity_child(x, y).
.decl solidity_parenthesized_expression_binary_expression_c(x: SolidityParenthesizedExpression, y: SolidityBinaryExpression)
solidity_parenthesized_expression_binary_expression_c(x, as(y, SolidityBinaryExpression)) :- solidity_parenthesized_expression(x), solidity_child(x, y).
.decl solidity_parenthesized_expression_boolean_literal_c(x: SolidityParenthesizedExpression, y: SolidityBooleanLiteral)
solidity_parenthesized_expression_boolean_literal_c(x, as(y, SolidityBooleanLiteral)) :- solidity_parenthesized_expression(x), solidity_child(x, y).
.decl solidity_parenthesized_expression_call_expression_c(x: SolidityParenthesizedExpression, y: SolidityCallExpression)
solidity_parenthesized_expression_call_expression_c(x, as(y, SolidityCallExpression)) :- solidity_parenthesized_expression(x), solidity_child(x, y).
.decl solidity_parenthesized_expression_hex_string_literal_c(x: SolidityParenthesizedExpression, y: SolidityHexStringLiteral)
solidity_parenthesized_expression_hex_string_literal_c(x, as(y, SolidityHexStringLiteral)) :- solidity_parenthesized_expression(x), solidity_child(x, y).
.decl solidity_parenthesized_expression_identifier_c(x: SolidityParenthesizedExpression, y: SolidityIdentifier)
solidity_parenthesized_expression_identifier_c(x, as(y, SolidityIdentifier)) :- solidity_parenthesized_expression(x), solidity_child(x, y).
.decl solidity_parenthesized_expression_inline_array_expression_c(x: SolidityParenthesizedExpression, y: SolidityInlineArrayExpression)
solidity_parenthesized_expression_inline_array_expression_c(x, as(y, SolidityInlineArrayExpression)) :- solidity_parenthesized_expression(x), solidity_child(x, y).
.decl solidity_parenthesized_expression_member_expression_c(x: SolidityParenthesizedExpression, y: SolidityMemberExpression)
solidity_parenthesized_expression_member_expression_c(x, as(y, SolidityMemberExpression)) :- solidity_parenthesized_expression(x), solidity_child(x, y).
.decl solidity_parenthesized_expression_meta_type_expression_c(x: SolidityParenthesizedExpression, y: SolidityMetaTypeExpression)
solidity_parenthesized_expression_meta_type_expression_c(x, as(y, SolidityMetaTypeExpression)) :- solidity_parenthesized_expression(x), solidity_child(x, y).
.decl solidity_parenthesized_expression_new_expression_c(x: SolidityParenthesizedExpression, y: SolidityNewExpression)
solidity_parenthesized_expression_new_expression_c(x, as(y, SolidityNewExpression)) :- solidity_parenthesized_expression(x), solidity_child(x, y).
.decl solidity_parenthesized_expression_number_literal_c(x: SolidityParenthesizedExpression, y: SolidityNumberLiteral)
solidity_parenthesized_expression_number_literal_c(x, as(y, SolidityNumberLiteral)) :- solidity_parenthesized_expression(x), solidity_child(x, y).
.decl solidity_parenthesized_expression_parenthesized_expression_c(x: SolidityParenthesizedExpression, y: SolidityParenthesizedExpression)
solidity_parenthesized_expression_parenthesized_expression_c(x, as(y, SolidityParenthesizedExpression)) :- solidity_parenthesized_expression(x), solidity_child(x, y).
.decl solidity_parenthesized_expression_payable_conversion_expression_c(x: SolidityParenthesizedExpression, y: SolidityPayableConversionExpression)
solidity_parenthesized_expression_payable_conversion_expression_c(x, as(y, SolidityPayableConversionExpression)) :- solidity_parenthesized_expression(x), solidity_child(x, y).
.decl solidity_parenthesized_expression_primitive_type_c(x: SolidityParenthesizedExpression, y: SolidityPrimitiveType)
solidity_parenthesized_expression_primitive_type_c(x, as(y, SolidityPrimitiveType)) :- solidity_parenthesized_expression(x), solidity_child(x, y).
.decl solidity_parenthesized_expression_slice_access_c(x: SolidityParenthesizedExpression, y: SoliditySliceAccess)
solidity_parenthesized_expression_slice_access_c(x, as(y, SoliditySliceAccess)) :- solidity_parenthesized_expression(x), solidity_child(x, y).
.decl solidity_parenthesized_expression_string_literal_c(x: SolidityParenthesizedExpression, y: SolidityStringLiteral)
solidity_parenthesized_expression_string_literal_c(x, as(y, SolidityStringLiteral)) :- solidity_parenthesized_expression(x), solidity_child(x, y).
.decl solidity_parenthesized_expression_struct_expression_c(x: SolidityParenthesizedExpression, y: SolidityStructExpression)
solidity_parenthesized_expression_struct_expression_c(x, as(y, SolidityStructExpression)) :- solidity_parenthesized_expression(x), solidity_child(x, y).
.decl solidity_parenthesized_expression_ternary_expression_c(x: SolidityParenthesizedExpression, y: SolidityTernaryExpression)
solidity_parenthesized_expression_ternary_expression_c(x, as(y, SolidityTernaryExpression)) :- solidity_parenthesized_expression(x), solidity_child(x, y).
.decl solidity_parenthesized_expression_tuple_expression_c(x: SolidityParenthesizedExpression, y: SolidityTupleExpression)
solidity_parenthesized_expression_tuple_expression_c(x, as(y, SolidityTupleExpression)) :- solidity_parenthesized_expression(x), solidity_child(x, y).
.decl solidity_parenthesized_expression_type_cast_expression_c(x: SolidityParenthesizedExpression, y: SolidityTypeCastExpression)
solidity_parenthesized_expression_type_cast_expression_c(x, as(y, SolidityTypeCastExpression)) :- solidity_parenthesized_expression(x), solidity_child(x, y).
.decl solidity_parenthesized_expression_unary_expression_c(x: SolidityParenthesizedExpression, y: SolidityUnaryExpression)
solidity_parenthesized_expression_unary_expression_c(x, as(y, SolidityUnaryExpression)) :- solidity_parenthesized_expression(x), solidity_child(x, y).
.decl solidity_parenthesized_expression_unicode_string_literal_c(x: SolidityParenthesizedExpression, y: SolidityUnicodeStringLiteral)
solidity_parenthesized_expression_unicode_string_literal_c(x, as(y, SolidityUnicodeStringLiteral)) :- solidity_parenthesized_expression(x), solidity_child(x, y).
.decl solidity_parenthesized_expression_update_expression_c(x: SolidityParenthesizedExpression, y: SolidityUpdateExpression)
solidity_parenthesized_expression_update_expression_c(x, as(y, SolidityUpdateExpression)) :- solidity_parenthesized_expression(x), solidity_child(x, y).
.decl solidity_parenthesized_expression_user_defined_type_c(x: SolidityParenthesizedExpression, y: SolidityUserDefinedType)
solidity_parenthesized_expression_user_defined_type_c(x, as(y, SolidityUserDefinedType)) :- solidity_parenthesized_expression(x), solidity_child(x, y).

.type SolidityPayableConversionExpression <: symbol
.decl solidity_payable_conversion_expression(x: SolidityPayableConversionExpression)
solidity_payable_conversion_expression(as(x, SolidityPayableConversionExpression)) :- solidity_node(x, "payable_conversion_expression", _, _, _, _, _, _, _, _, _, _, _).
.decl solidity_payable_conversion_expression_call_argument_c(x: SolidityPayableConversionExpression, y: SolidityCallArgument)
solidity_payable_conversion_expression_call_argument_c(x, as(y, SolidityCallArgument)) :- solidity_payable_conversion_expression(x), solidity_child(x, y).

.type SolidityPragmaDirective <: symbol
.decl solidity_pragma_directive(x: SolidityPragmaDirective)
solidity_pragma_directive(as(x, SolidityPragmaDirective)) :- solidity_node(x, "pragma_directive", _, _, _, _, _, _, _, _, _, _, _).
.decl solidity_pragma_directive_any_pragma_token_c(x: SolidityPragmaDirective, y: SolidityAnyPragmaToken)
solidity_pragma_directive_any_pragma_token_c(x, as(y, SolidityAnyPragmaToken)) :- solidity_pragma_directive(x), solidity_child(x, y).
.decl solidity_pragma_directive_solidity_pragma_token_c(x: SolidityPragmaDirective, y: SoliditySolidityPragmaToken)
solidity_pragma_directive_solidity_pragma_token_c(x, as(y, SoliditySolidityPragmaToken)) :- solidity_pragma_directive(x), solidity_child(x, y).

.type SolidityPragmaValue <: symbol
.decl solidity_pragma_value(x: SolidityPragmaValue)
solidity_pragma_value(as(x, SolidityPragmaValue)) :- solidity_node(x, "pragma_value", _, _, _, _, _, _, _, _, _, _, _).

.type SolidityPrimitiveType <: symbol
.decl solidity_primitive_type(x: SolidityPrimitiveType)
solidity_primitive_type(as(x, SolidityPrimitiveType)) :- solidity_node(x, "primitive_type", _, _, _, _, _, _, _, _, _, _, _).

.type SolidityReturnParameter <: symbol
.decl solidity_return_parameter(x: SolidityReturnParameter)
solidity_return_parameter(as(x, SolidityReturnParameter)) :- solidity_node(x, "return_parameter", _, _, _, _, _, _, _, _, _, _, _).
.decl solidity_return_parameter_type_f(x: SolidityReturnParameter, y: SolidityTypeName)
solidity_return_parameter_type_f(x, as(y, SolidityTypeName)) :- solidity_return_parameter(x), solidity_field(x, "type", y).

.type SolidityReturnStatement <: symbol
.decl solidity_return_statement(x: SolidityReturnStatement)
solidity_return_statement(as(x, SolidityReturnStatement)) :- solidity_node(x, "return_statement", _, _, _, _, _, _, _, _, _, _, _).
.decl solidity_return_statement_array_access_c(x: SolidityReturnStatement, y: SolidityArrayAccess)
solidity_return_statement_array_access_c(x, as(y, SolidityArrayAccess)) :- solidity_return_statement(x), solidity_child(x, y).
.decl solidity_return_statement_assignment_expression_c(x: SolidityReturnStatement, y: SolidityAssignmentExpression)
solidity_return_statement_assignment_expression_c(x, as(y, SolidityAssignmentExpression)) :- solidity_return_statement(x), solidity_child(x, y).
.decl solidity_return_statement_augmented_assignment_expression_c(x: SolidityReturnStatement, y: SolidityAugmentedAssignmentExpression)
solidity_return_statement_augmented_assignment_expression_c(x, as(y, SolidityAugmentedAssignmentExpression)) :- solidity_return_statement(x), solidity_child(x, y).
.decl solidity_return_statement_binary_expression_c(x: SolidityReturnStatement, y: SolidityBinaryExpression)
solidity_return_statement_binary_expression_c(x, as(y, SolidityBinaryExpression)) :- solidity_return_statement(x), solidity_child(x, y).
.decl solidity_return_statement_boolean_literal_c(x: SolidityReturnStatement, y: SolidityBooleanLiteral)
solidity_return_statement_boolean_literal_c(x, as(y, SolidityBooleanLiteral)) :- solidity_return_statement(x), solidity_child(x, y).
.decl solidity_return_statement_call_expression_c(x: SolidityReturnStatement, y: SolidityCallExpression)
solidity_return_statement_call_expression_c(x, as(y, SolidityCallExpression)) :- solidity_return_statement(x), solidity_child(x, y).
.decl solidity_return_statement_hex_string_literal_c(x: SolidityReturnStatement, y: SolidityHexStringLiteral)
solidity_return_statement_hex_string_literal_c(x, as(y, SolidityHexStringLiteral)) :- solidity_return_statement(x), solidity_child(x, y).
.decl solidity_return_statement_identifier_c(x: SolidityReturnStatement, y: SolidityIdentifier)
solidity_return_statement_identifier_c(x, as(y, SolidityIdentifier)) :- solidity_return_statement(x), solidity_child(x, y).
.decl solidity_return_statement_inline_array_expression_c(x: SolidityReturnStatement, y: SolidityInlineArrayExpression)
solidity_return_statement_inline_array_expression_c(x, as(y, SolidityInlineArrayExpression)) :- solidity_return_statement(x), solidity_child(x, y).
.decl solidity_return_statement_member_expression_c(x: SolidityReturnStatement, y: SolidityMemberExpression)
solidity_return_statement_member_expression_c(x, as(y, SolidityMemberExpression)) :- solidity_return_statement(x), solidity_child(x, y).
.decl solidity_return_statement_meta_type_expression_c(x: SolidityReturnStatement, y: SolidityMetaTypeExpression)
solidity_return_statement_meta_type_expression_c(x, as(y, SolidityMetaTypeExpression)) :- solidity_return_statement(x), solidity_child(x, y).
.decl solidity_return_statement_new_expression_c(x: SolidityReturnStatement, y: SolidityNewExpression)
solidity_return_statement_new_expression_c(x, as(y, SolidityNewExpression)) :- solidity_return_statement(x), solidity_child(x, y).
.decl solidity_return_statement_number_literal_c(x: SolidityReturnStatement, y: SolidityNumberLiteral)
solidity_return_statement_number_literal_c(x, as(y, SolidityNumberLiteral)) :- solidity_return_statement(x), solidity_child(x, y).
.decl solidity_return_statement_parenthesized_expression_c(x: SolidityReturnStatement, y: SolidityParenthesizedExpression)
solidity_return_statement_parenthesized_expression_c(x, as(y, SolidityParenthesizedExpression)) :- solidity_return_statement(x), solidity_child(x, y).
.decl solidity_return_statement_payable_conversion_expression_c(x: SolidityReturnStatement, y: SolidityPayableConversionExpression)
solidity_return_statement_payable_conversion_expression_c(x, as(y, SolidityPayableConversionExpression)) :- solidity_return_statement(x), solidity_child(x, y).
.decl solidity_return_statement_primitive_type_c(x: SolidityReturnStatement, y: SolidityPrimitiveType)
solidity_return_statement_primitive_type_c(x, as(y, SolidityPrimitiveType)) :- solidity_return_statement(x), solidity_child(x, y).
.decl solidity_return_statement_slice_access_c(x: SolidityReturnStatement, y: SoliditySliceAccess)
solidity_return_statement_slice_access_c(x, as(y, SoliditySliceAccess)) :- solidity_return_statement(x), solidity_child(x, y).
.decl solidity_return_statement_string_literal_c(x: SolidityReturnStatement, y: SolidityStringLiteral)
solidity_return_statement_string_literal_c(x, as(y, SolidityStringLiteral)) :- solidity_return_statement(x), solidity_child(x, y).
.decl solidity_return_statement_struct_expression_c(x: SolidityReturnStatement, y: SolidityStructExpression)
solidity_return_statement_struct_expression_c(x, as(y, SolidityStructExpression)) :- solidity_return_statement(x), solidity_child(x, y).
.decl solidity_return_statement_ternary_expression_c(x: SolidityReturnStatement, y: SolidityTernaryExpression)
solidity_return_statement_ternary_expression_c(x, as(y, SolidityTernaryExpression)) :- solidity_return_statement(x), solidity_child(x, y).
.decl solidity_return_statement_tuple_expression_c(x: SolidityReturnStatement, y: SolidityTupleExpression)
solidity_return_statement_tuple_expression_c(x, as(y, SolidityTupleExpression)) :- solidity_return_statement(x), solidity_child(x, y).
.decl solidity_return_statement_type_cast_expression_c(x: SolidityReturnStatement, y: SolidityTypeCastExpression)
solidity_return_statement_type_cast_expression_c(x, as(y, SolidityTypeCastExpression)) :- solidity_return_statement(x), solidity_child(x, y).
.decl solidity_return_statement_unary_expression_c(x: SolidityReturnStatement, y: SolidityUnaryExpression)
solidity_return_statement_unary_expression_c(x, as(y, SolidityUnaryExpression)) :- solidity_return_statement(x), solidity_child(x, y).
.decl solidity_return_statement_unicode_string_literal_c(x: SolidityReturnStatement, y: SolidityUnicodeStringLiteral)
solidity_return_statement_unicode_string_literal_c(x, as(y, SolidityUnicodeStringLiteral)) :- solidity_return_statement(x), solidity_child(x, y).
.decl solidity_return_statement_update_expression_c(x: SolidityReturnStatement, y: SolidityUpdateExpression)
solidity_return_statement_update_expression_c(x, as(y, SolidityUpdateExpression)) :- solidity_return_statement(x), solidity_child(x, y).
.decl solidity_return_statement_user_defined_type_c(x: SolidityReturnStatement, y: SolidityUserDefinedType)
solidity_return_statement_user_defined_type_c(x, as(y, SolidityUserDefinedType)) :- solidity_return_statement(x), solidity_child(x, y).

.type SolidityReturnTypeDefinition <: symbol
.decl solidity_return_type_definition(x: SolidityReturnTypeDefinition)
solidity_return_type_definition(as(x, SolidityReturnTypeDefinition)) :- solidity_node(x, "return_type_definition", _, _, _, _, _, _, _, _, _, _, _).
.decl solidity_return_type_definition_parameter_c(x: SolidityReturnTypeDefinition, y: SolidityParameter)
solidity_return_type_definition_parameter_c(x, as(y, SolidityParameter)) :- solidity_return_type_definition(x), solidity_child(x, y).

.type SolidityRevertArguments <: symbol
.decl solidity_revert_arguments(x: SolidityRevertArguments)
solidity_revert_arguments(as(x, SolidityRevertArguments)) :- solidity_node(x, "revert_arguments", _, _, _, _, _, _, _, _, _, _, _).
.decl solidity_revert_arguments_call_argument_c(x: SolidityRevertArguments, y: SolidityCallArgument)
solidity_revert_arguments_call_argument_c(x, as(y, SolidityCallArgument)) :- solidity_revert_arguments(x), solidity_child(x, y).

.type SolidityRevertStatement <: symbol
.decl solidity_revert_statement(x: SolidityRevertStatement)
solidity_revert_statement(as(x, SolidityRevertStatement)) :- solidity_node(x, "revert_statement", _, _, _, _, _, _, _, _, _, _, _).
.type SolidityFieldRevertStatementError = SolidityArrayAccess | SolidityAssignmentExpression | SolidityAugmentedAssignmentExpression | SolidityBinaryExpression | SolidityBooleanLiteral | SolidityCallExpression | SolidityHexStringLiteral | SolidityIdentifier | SolidityInlineArrayExpression | SolidityMemberExpression | SolidityMetaTypeExpression | SolidityNewExpression | SolidityNumberLiteral | SolidityParenthesizedExpression | SolidityPayableConversionExpression | SolidityPrimitiveType | SoliditySliceAccess | SolidityStringLiteral | SolidityStructExpression | SolidityTernaryExpression | SolidityTupleExpression | SolidityTypeCastExpression | SolidityUnaryExpression | SolidityUnicodeStringLiteral | SolidityUpdateExpression | SolidityUserDefinedType
.decl solidity_revert_statement_error_f(x: SolidityRevertStatement, y: SolidityFieldRevertStatementError)
solidity_revert_statement_error_f(x, as(y, SolidityFieldRevertStatementError)) :- solidity_revert_statement(x), solidity_field(x, "error", y).
.decl solidity_revert_statement_revert_arguments_c(x: SolidityRevertStatement, y: SolidityRevertArguments)
solidity_revert_statement_revert_arguments_c(x, as(y, SolidityRevertArguments)) :- solidity_revert_statement(x), solidity_child(x, y).

.type SoliditySliceAccess <: symbol
.decl solidity_slice_access(x: SoliditySliceAccess)
solidity_slice_access(as(x, SoliditySliceAccess)) :- solidity_node(x, "slice_access", _, _, _, _, _, _, _, _, _, _, _).
.type SolidityFieldSliceAccessBase = SolidityArrayAccess | SolidityAssignmentExpression | SolidityAugmentedAssignmentExpression | SolidityBinaryExpression | SolidityBooleanLiteral | SolidityCallExpression | SolidityHexStringLiteral | SolidityIdentifier | SolidityInlineArrayExpression | SolidityMemberExpression | SolidityMetaTypeExpression | SolidityNewExpression | SolidityNumberLiteral | SolidityParenthesizedExpression | SolidityPayableConversionExpression | SolidityPrimitiveType | SoliditySliceAccess | SolidityStringLiteral | SolidityStructExpression | SolidityTernaryExpression | SolidityTupleExpression | SolidityTypeCastExpression | SolidityUnaryExpression | SolidityUnicodeStringLiteral | SolidityUpdateExpression | SolidityUserDefinedType
.decl solidity_slice_access_base_f(x: SoliditySliceAccess, y: SolidityFieldSliceAccessBase)
solidity_slice_access_base_f(x, as(y, SolidityFieldSliceAccessBase)) :- solidity_slice_access(x), solidity_field(x, "base", y).
.type SolidityFieldSliceAccessFrom = SolidityArrayAccess | SolidityAssignmentExpression | SolidityAugmentedAssignmentExpression | SolidityBinaryExpression | SolidityBooleanLiteral | SolidityCallExpression | SolidityHexStringLiteral | SolidityIdentifier | SolidityInlineArrayExpression | SolidityMemberExpression | SolidityMetaTypeExpression | SolidityNewExpression | SolidityNumberLiteral | SolidityParenthesizedExpression | SolidityPayableConversionExpression | SolidityPrimitiveType | SoliditySliceAccess | SolidityStringLiteral | SolidityStructExpression | SolidityTernaryExpression | SolidityTupleExpression | SolidityTypeCastExpression | SolidityUnaryExpression | SolidityUnicodeStringLiteral | SolidityUpdateExpression | SolidityUserDefinedType
.decl solidity_slice_access_from_f(x: SoliditySliceAccess, y: SolidityFieldSliceAccessFrom)
solidity_slice_access_from_f(x, as(y, SolidityFieldSliceAccessFrom)) :- solidity_slice_access(x), solidity_field(x, "from", y).
.type SolidityFieldSliceAccessTo = SolidityArrayAccess | SolidityAssignmentExpression | SolidityAugmentedAssignmentExpression | SolidityBinaryExpression | SolidityBooleanLiteral | SolidityCallExpression | SolidityHexStringLiteral | SolidityIdentifier | SolidityInlineArrayExpression | SolidityMemberExpression | SolidityMetaTypeExpression | SolidityNewExpression | SolidityNumberLiteral | SolidityParenthesizedExpression | SolidityPayableConversionExpression | SolidityPrimitiveType | SoliditySliceAccess | SolidityStringLiteral | SolidityStructExpression | SolidityTernaryExpression | SolidityTupleExpression | SolidityTypeCastExpression | SolidityUnaryExpression | SolidityUnicodeStringLiteral | SolidityUpdateExpression | SolidityUserDefinedType
.decl solidity_slice_access_to_f(x: SoliditySliceAccess, y: SolidityFieldSliceAccessTo)
solidity_slice_access_to_f(x, as(y, SolidityFieldSliceAccessTo)) :- solidity_slice_access(x), solidity_field(x, "to", y).

.type SoliditySolidityPragmaToken <: symbol
.decl solidity_solidity_pragma_token(x: SoliditySolidityPragmaToken)
solidity_solidity_pragma_token(as(x, SoliditySolidityPragmaToken)) :- solidity_node(x, "solidity_pragma_token", _, _, _, _, _, _, _, _, _, _, _).
.type SolidityFieldSolidityPragmaTokenVersionConstraint = SoliditySolidityVersion | SoliditySolidityVersionComparisonOperator
.decl solidity_solidity_pragma_token_version_constraint_f(x: SoliditySolidityPragmaToken, y: SolidityFieldSolidityPragmaTokenVersionConstraint)
solidity_solidity_pragma_token_version_constraint_f(x, as(y, SolidityFieldSolidityPragmaTokenVersionConstraint)) :- solidity_solidity_pragma_token(x), solidity_field(x, "version_constraint", y).

.type SoliditySolidityVersionComparisonOperator <: symbol
.decl solidity_solidity_version_comparison_operator(x: SoliditySolidityVersionComparisonOperator)
solidity_solidity_version_comparison_operator(as(x, SoliditySolidityVersionComparisonOperator)) :- solidity_node(x, "solidity_version_comparison_operator", _, _, _, _, _, _, _, _, _, _, _).

.type SoliditySourceFile <: symbol
.decl solidity_source_file(x: SoliditySourceFile)
solidity_source_file(as(x, SoliditySourceFile)) :- solidity_node(x, "source_file", _, _, _, _, _, _, _, _, _, _, _).
.decl solidity_source_file_constant_variable_declaration_c(x: SoliditySourceFile, y: SolidityConstantVariableDeclaration)
solidity_source_file_constant_variable_declaration_c(x, as(y, SolidityConstantVariableDeclaration)) :- solidity_source_file(x), solidity_child(x, y).
.decl solidity_source_file_contract_declaration_c(x: SoliditySourceFile, y: SolidityContractDeclaration)
solidity_source_file_contract_declaration_c(x, as(y, SolidityContractDeclaration)) :- solidity_source_file(x), solidity_child(x, y).
.decl solidity_source_file_enum_declaration_c(x: SoliditySourceFile, y: SolidityEnumDeclaration)
solidity_source_file_enum_declaration_c(x, as(y, SolidityEnumDeclaration)) :- solidity_source_file(x), solidity_child(x, y).
.decl solidity_source_file_error_declaration_c(x: SoliditySourceFile, y: SolidityErrorDeclaration)
solidity_source_file_error_declaration_c(x, as(y, SolidityErrorDeclaration)) :- solidity_source_file(x), solidity_child(x, y).
.decl solidity_source_file_function_definition_c(x: SoliditySourceFile, y: SolidityFunctionDefinition)
solidity_source_file_function_definition_c(x, as(y, SolidityFunctionDefinition)) :- solidity_source_file(x), solidity_child(x, y).
.decl solidity_source_file_import_directive_c(x: SoliditySourceFile, y: SolidityImportDirective)
solidity_source_file_import_directive_c(x, as(y, SolidityImportDirective)) :- solidity_source_file(x), solidity_child(x, y).
.decl solidity_source_file_interface_declaration_c(x: SoliditySourceFile, y: SolidityInterfaceDeclaration)
solidity_source_file_interface_declaration_c(x, as(y, SolidityInterfaceDeclaration)) :- solidity_source_file(x), solidity_child(x, y).
.decl solidity_source_file_library_declaration_c(x: SoliditySourceFile, y: SolidityLibraryDeclaration)
solidity_source_file_library_declaration_c(x, as(y, SolidityLibraryDeclaration)) :- solidity_source_file(x), solidity_child(x, y).
.decl solidity_source_file_pragma_directive_c(x: SoliditySourceFile, y: SolidityPragmaDirective)
solidity_source_file_pragma_directive_c(x, as(y, SolidityPragmaDirective)) :- solidity_source_file(x), solidity_child(x, y).
.decl solidity_source_file_struct_declaration_c(x: SoliditySourceFile, y: SolidityStructDeclaration)
solidity_source_file_struct_declaration_c(x, as(y, SolidityStructDeclaration)) :- solidity_source_file(x), solidity_child(x, y).
.decl solidity_source_file_user_defined_type_definition_c(x: SoliditySourceFile, y: SolidityUserDefinedTypeDefinition)
solidity_source_file_user_defined_type_definition_c(x, as(y, SolidityUserDefinedTypeDefinition)) :- solidity_source_file(x), solidity_child(x, y).

.type SolidityStateMutability <: symbol
.decl solidity_state_mutability(x: SolidityStateMutability)
solidity_state_mutability(as(x, SolidityStateMutability)) :- solidity_node(x, "state_mutability", _, _, _, _, _, _, _, _, _, _, _).

.type SolidityStateVariableDeclaration <: symbol
.decl solidity_state_variable_declaration(x: SolidityStateVariableDeclaration)
solidity_state_variable_declaration(as(x, SolidityStateVariableDeclaration)) :- solidity_node(x, "state_variable_declaration", _, _, _, _, _, _, _, _, _, _, _).
.decl solidity_state_variable_declaration_type_f(x: SolidityStateVariableDeclaration, y: SolidityTypeName)
solidity_state_variable_declaration_type_f(x, as(y, SolidityTypeName)) :- solidity_state_variable_declaration(x), solidity_field(x, "type", y).
.type SolidityFieldStateVariableDeclarationValue = SolidityArrayAccess | SolidityAssignmentExpression | SolidityAugmentedAssignmentExpression | SolidityBinaryExpression | SolidityBooleanLiteral | SolidityCallExpression | SolidityHexStringLiteral | SolidityIdentifier | SolidityInlineArrayExpression | SolidityMemberExpression | SolidityMetaTypeExpression | SolidityNewExpression | SolidityNumberLiteral | SolidityParenthesizedExpression | SolidityPayableConversionExpression | SolidityPrimitiveType | SoliditySliceAccess | SolidityStringLiteral | SolidityStructExpression | SolidityTernaryExpression | SolidityTupleExpression | SolidityTypeCastExpression | SolidityUnaryExpression | SolidityUnicodeStringLiteral | SolidityUpdateExpression | SolidityUserDefinedType
.decl solidity_state_variable_declaration_value_f(x: SolidityStateVariableDeclaration, y: SolidityFieldStateVariableDeclarationValue)
solidity_state_variable_declaration_value_f(x, as(y, SolidityFieldStateVariableDeclarationValue)) :- solidity_state_variable_declaration(x), solidity_field(x, "value", y).
.decl solidity_state_variable_declaration_name_f(x: SolidityStateVariableDeclaration, y: SolidityIdentifier)
solidity_state_variable_declaration_name_f(x, as(y, SolidityIdentifier)) :- solidity_state_variable_declaration(x), solidity_field(x, "name", y).
.decl solidity_state_variable_declaration_visibility_f(x: SolidityStateVariableDeclaration, y: SolidityVisibility)
solidity_state_variable_declaration_visibility_f(x, as(y, SolidityVisibility)) :- solidity_state_variable_declaration(x), solidity_field(x, "visibility", y).
.decl solidity_state_variable_declaration_immutable_c(x: SolidityStateVariableDeclaration, y: SolidityImmutable)
solidity_state_variable_declaration_immutable_c(x, as(y, SolidityImmutable)) :- solidity_state_variable_declaration(x), solidity_child(x, y).
.decl solidity_state_variable_declaration_override_specifier_c(x: SolidityStateVariableDeclaration, y: SolidityOverrideSpecifier)
solidity_state_variable_declaration_override_specifier_c(x, as(y, SolidityOverrideSpecifier)) :- solidity_state_variable_declaration(x), solidity_child(x, y).

.type SolidityString <: symbol
.decl solidity_string(x: SolidityString)
solidity_string(as(x, SolidityString)) :- solidity_node(x, "string", _, _, _, _, _, _, _, _, _, _, _).

.type SolidityStringLiteral <: symbol
.decl solidity_string_literal(x: SolidityStringLiteral)
solidity_string_literal(as(x, SolidityStringLiteral)) :- solidity_node(x, "string_literal", _, _, _, _, _, _, _, _, _, _, _).
.decl solidity_string_literal_string_c(x: SolidityStringLiteral, y: SolidityString)
solidity_string_literal_string_c(x, as(y, SolidityString)) :- solidity_string_literal(x), solidity_child(x, y).

.type SolidityStructDeclaration <: symbol
.decl solidity_struct_declaration(x: SolidityStructDeclaration)
solidity_struct_declaration(as(x, SolidityStructDeclaration)) :- solidity_node(x, "struct_declaration", _, _, _, _, _, _, _, _, _, _, _).
.decl solidity_struct_declaration_name_f(x: SolidityStructDeclaration, y: SolidityIdentifier)
solidity_struct_declaration_name_f(x, as(y, SolidityIdentifier)) :- solidity_struct_declaration(x), solidity_field(x, "name", y).
.decl solidity_struct_declaration_struct_member_c(x: SolidityStructDeclaration, y: SolidityStructMember)
solidity_struct_declaration_struct_member_c(x, as(y, SolidityStructMember)) :- solidity_struct_declaration(x), solidity_child(x, y).

.type SolidityStructExpression <: symbol
.decl solidity_struct_expression(x: SolidityStructExpression)
solidity_struct_expression(as(x, SolidityStructExpression)) :- solidity_node(x, "struct_expression", _, _, _, _, _, _, _, _, _, _, _).
.type SolidityFieldStructExpressionType = SolidityArrayAccess | SolidityAssignmentExpression | SolidityAugmentedAssignmentExpression | SolidityBinaryExpression | SolidityBooleanLiteral | SolidityCallExpression | SolidityHexStringLiteral | SolidityIdentifier | SolidityInlineArrayExpression | SolidityMemberExpression | SolidityMetaTypeExpression | SolidityNewExpression | SolidityNumberLiteral | SolidityParenthesizedExpression | SolidityPayableConversionExpression | SolidityPrimitiveType | SoliditySliceAccess | SolidityStringLiteral | SolidityStructExpression | SolidityTernaryExpression | SolidityTupleExpression | SolidityTypeCastExpression | SolidityUnaryExpression | SolidityUnicodeStringLiteral | SolidityUpdateExpression | SolidityUserDefinedType
.decl solidity_struct_expression_type_f(x: SolidityStructExpression, y: SolidityFieldStructExpressionType)
solidity_struct_expression_type_f(x, as(y, SolidityFieldStructExpressionType)) :- solidity_struct_expression(x), solidity_field(x, "type", y).
.decl solidity_struct_expression_struct_field_assignment_c(x: SolidityStructExpression, y: SolidityStructFieldAssignment)
solidity_struct_expression_struct_field_assignment_c(x, as(y, SolidityStructFieldAssignment)) :- solidity_struct_expression(x), solidity_child(x, y).

.type SolidityStructFieldAssignment <: symbol
.decl solidity_struct_field_assignment(x: SolidityStructFieldAssignment)
solidity_struct_field_assignment(as(x, SolidityStructFieldAssignment)) :- solidity_node(x, "struct_field_assignment", _, _, _, _, _, _, _, _, _, _, _).
.type SolidityFieldStructFieldAssignmentValue = SolidityArrayAccess | SolidityAssignmentExpression | SolidityAugmentedAssignmentExpression | SolidityBinaryExpression | SolidityBooleanLiteral | SolidityCallExpression | SolidityHexStringLiteral | SolidityIdentifier | SolidityInlineArrayExpression | SolidityMemberExpression | SolidityMetaTypeExpression | SolidityNewExpression | SolidityNumberLiteral | SolidityParenthesizedExpression | SolidityPayableConversionExpression | SolidityPrimitiveType | SoliditySliceAccess | SolidityStringLiteral | SolidityStructExpression | SolidityTernaryExpression | SolidityTupleExpression | SolidityTypeCastExpression | SolidityUnaryExpression | SolidityUnicodeStringLiteral | SolidityUpdateExpression | SolidityUserDefinedType
.decl solidity_struct_field_assignment_value_f(x: SolidityStructFieldAssignment, y: SolidityFieldStructFieldAssignmentValue)
solidity_struct_field_assignment_value_f(x, as(y, SolidityFieldStructFieldAssignmentValue)) :- solidity_struct_field_assignment(x), solidity_field(x, "value", y).
.decl solidity_struct_field_assignment_name_f(x: SolidityStructFieldAssignment, y: SolidityIdentifier)
solidity_struct_field_assignment_name_f(x, as(y, SolidityIdentifier)) :- solidity_struct_field_assignment(x), solidity_field(x, "name", y).

.type SolidityStructMember <: symbol
.decl solidity_struct_member(x: SolidityStructMember)
solidity_struct_member(as(x, SolidityStructMember)) :- solidity_node(x, "struct_member", _, _, _, _, _, _, _, _, _, _, _).
.decl solidity_struct_member_name_f(x: SolidityStructMember, y: SolidityIdentifier)
solidity_struct_member_name_f(x, as(y, SolidityIdentifier)) :- solidity_struct_member(x), solidity_field(x, "name", y).
.decl solidity_struct_member_type_f(x: SolidityStructMember, y: SolidityTypeName)
solidity_struct_member_type_f(x, as(y, SolidityTypeName)) :- solidity_struct_member(x), solidity_field(x, "type", y).

.type SolidityTernaryExpression <: symbol
.decl solidity_ternary_expression(x: SolidityTernaryExpression)
solidity_ternary_expression(as(x, SolidityTernaryExpression)) :- solidity_node(x, "ternary_expression", _, _, _, _, _, _, _, _, _, _, _).
.decl solidity_ternary_expression_array_access_c(x: SolidityTernaryExpression, y: SolidityArrayAccess)
solidity_ternary_expression_array_access_c(x, as(y, SolidityArrayAccess)) :- solidity_ternary_expression(x), solidity_child(x, y).
.decl solidity_ternary_expression_assignment_expression_c(x: SolidityTernaryExpression, y: SolidityAssignmentExpression)
solidity_ternary_expression_assignment_expression_c(x, as(y, SolidityAssignmentExpression)) :- solidity_ternary_expression(x), solidity_child(x, y).
.decl solidity_ternary_expression_augmented_assignment_expression_c(x: SolidityTernaryExpression, y: SolidityAugmentedAssignmentExpression)
solidity_ternary_expression_augmented_assignment_expression_c(x, as(y, SolidityAugmentedAssignmentExpression)) :- solidity_ternary_expression(x), solidity_child(x, y).
.decl solidity_ternary_expression_binary_expression_c(x: SolidityTernaryExpression, y: SolidityBinaryExpression)
solidity_ternary_expression_binary_expression_c(x, as(y, SolidityBinaryExpression)) :- solidity_ternary_expression(x), solidity_child(x, y).
.decl solidity_ternary_expression_boolean_literal_c(x: SolidityTernaryExpression, y: SolidityBooleanLiteral)
solidity_ternary_expression_boolean_literal_c(x, as(y, SolidityBooleanLiteral)) :- solidity_ternary_expression(x), solidity_child(x, y).
.decl solidity_ternary_expression_call_expression_c(x: SolidityTernaryExpression, y: SolidityCallExpression)
solidity_ternary_expression_call_expression_c(x, as(y, SolidityCallExpression)) :- solidity_ternary_expression(x), solidity_child(x, y).
.decl solidity_ternary_expression_hex_string_literal_c(x: SolidityTernaryExpression, y: SolidityHexStringLiteral)
solidity_ternary_expression_hex_string_literal_c(x, as(y, SolidityHexStringLiteral)) :- solidity_ternary_expression(x), solidity_child(x, y).
.decl solidity_ternary_expression_identifier_c(x: SolidityTernaryExpression, y: SolidityIdentifier)
solidity_ternary_expression_identifier_c(x, as(y, SolidityIdentifier)) :- solidity_ternary_expression(x), solidity_child(x, y).
.decl solidity_ternary_expression_inline_array_expression_c(x: SolidityTernaryExpression, y: SolidityInlineArrayExpression)
solidity_ternary_expression_inline_array_expression_c(x, as(y, SolidityInlineArrayExpression)) :- solidity_ternary_expression(x), solidity_child(x, y).
.decl solidity_ternary_expression_member_expression_c(x: SolidityTernaryExpression, y: SolidityMemberExpression)
solidity_ternary_expression_member_expression_c(x, as(y, SolidityMemberExpression)) :- solidity_ternary_expression(x), solidity_child(x, y).
.decl solidity_ternary_expression_meta_type_expression_c(x: SolidityTernaryExpression, y: SolidityMetaTypeExpression)
solidity_ternary_expression_meta_type_expression_c(x, as(y, SolidityMetaTypeExpression)) :- solidity_ternary_expression(x), solidity_child(x, y).
.decl solidity_ternary_expression_new_expression_c(x: SolidityTernaryExpression, y: SolidityNewExpression)
solidity_ternary_expression_new_expression_c(x, as(y, SolidityNewExpression)) :- solidity_ternary_expression(x), solidity_child(x, y).
.decl solidity_ternary_expression_number_literal_c(x: SolidityTernaryExpression, y: SolidityNumberLiteral)
solidity_ternary_expression_number_literal_c(x, as(y, SolidityNumberLiteral)) :- solidity_ternary_expression(x), solidity_child(x, y).
.decl solidity_ternary_expression_parenthesized_expression_c(x: SolidityTernaryExpression, y: SolidityParenthesizedExpression)
solidity_ternary_expression_parenthesized_expression_c(x, as(y, SolidityParenthesizedExpression)) :- solidity_ternary_expression(x), solidity_child(x, y).
.decl solidity_ternary_expression_payable_conversion_expression_c(x: SolidityTernaryExpression, y: SolidityPayableConversionExpression)
solidity_ternary_expression_payable_conversion_expression_c(x, as(y, SolidityPayableConversionExpression)) :- solidity_ternary_expression(x), solidity_child(x, y).
.decl solidity_ternary_expression_primitive_type_c(x: SolidityTernaryExpression, y: SolidityPrimitiveType)
solidity_ternary_expression_primitive_type_c(x, as(y, SolidityPrimitiveType)) :- solidity_ternary_expression(x), solidity_child(x, y).
.decl solidity_ternary_expression_slice_access_c(x: SolidityTernaryExpression, y: SoliditySliceAccess)
solidity_ternary_expression_slice_access_c(x, as(y, SoliditySliceAccess)) :- solidity_ternary_expression(x), solidity_child(x, y).
.decl solidity_ternary_expression_string_literal_c(x: SolidityTernaryExpression, y: SolidityStringLiteral)
solidity_ternary_expression_string_literal_c(x, as(y, SolidityStringLiteral)) :- solidity_ternary_expression(x), solidity_child(x, y).
.decl solidity_ternary_expression_struct_expression_c(x: SolidityTernaryExpression, y: SolidityStructExpression)
solidity_ternary_expression_struct_expression_c(x, as(y, SolidityStructExpression)) :- solidity_ternary_expression(x), solidity_child(x, y).
.decl solidity_ternary_expression_ternary_expression_c(x: SolidityTernaryExpression, y: SolidityTernaryExpression)
solidity_ternary_expression_ternary_expression_c(x, as(y, SolidityTernaryExpression)) :- solidity_ternary_expression(x), solidity_child(x, y).
.decl solidity_ternary_expression_tuple_expression_c(x: SolidityTernaryExpression, y: SolidityTupleExpression)
solidity_ternary_expression_tuple_expression_c(x, as(y, SolidityTupleExpression)) :- solidity_ternary_expression(x), solidity_child(x, y).
.decl solidity_ternary_expression_type_cast_expression_c(x: SolidityTernaryExpression, y: SolidityTypeCastExpression)
solidity_ternary_expression_type_cast_expression_c(x, as(y, SolidityTypeCastExpression)) :- solidity_ternary_expression(x), solidity_child(x, y).
.decl solidity_ternary_expression_unary_expression_c(x: SolidityTernaryExpression, y: SolidityUnaryExpression)
solidity_ternary_expression_unary_expression_c(x, as(y, SolidityUnaryExpression)) :- solidity_ternary_expression(x), solidity_child(x, y).
.decl solidity_ternary_expression_unicode_string_literal_c(x: SolidityTernaryExpression, y: SolidityUnicodeStringLiteral)
solidity_ternary_expression_unicode_string_literal_c(x, as(y, SolidityUnicodeStringLiteral)) :- solidity_ternary_expression(x), solidity_child(x, y).
.decl solidity_ternary_expression_update_expression_c(x: SolidityTernaryExpression, y: SolidityUpdateExpression)
solidity_ternary_expression_update_expression_c(x, as(y, SolidityUpdateExpression)) :- solidity_ternary_expression(x), solidity_child(x, y).
.decl solidity_ternary_expression_user_defined_type_c(x: SolidityTernaryExpression, y: SolidityUserDefinedType)
solidity_ternary_expression_user_defined_type_c(x, as(y, SolidityUserDefinedType)) :- solidity_ternary_expression(x), solidity_child(x, y).

.type SolidityTrue <: symbol
.decl solidity_true(x: SolidityTrue)
solidity_true(as(x, SolidityTrue)) :- solidity_node(x, "true", _, _, _, _, _, _, _, _, _, _, _).

.type SolidityTryStatement <: symbol
.decl solidity_try_statement(x: SolidityTryStatement)
solidity_try_statement(as(x, SolidityTryStatement)) :- solidity_node(x, "try_statement", _, _, _, _, _, _, _, _, _, _, _).
.type SolidityFieldTryStatementAttempt = SolidityArrayAccess | SolidityAssignmentExpression | SolidityAugmentedAssignmentExpression | SolidityBinaryExpression | SolidityBooleanLiteral | SolidityCallExpression | SolidityHexStringLiteral | SolidityIdentifier | SolidityInlineArrayExpression | SolidityMemberExpression | SolidityMetaTypeExpression | SolidityNewExpression | SolidityNumberLiteral | SolidityParenthesizedExpression | SolidityPayableConversionExpression | SolidityPrimitiveType | SoliditySliceAccess | SolidityStringLiteral | SolidityStructExpression | SolidityTernaryExpression | SolidityTupleExpression | SolidityTypeCastExpression | SolidityUnaryExpression | SolidityUnicodeStringLiteral | SolidityUpdateExpression | SolidityUserDefinedType
.decl solidity_try_statement_attempt_f(x: SolidityTryStatement, y: SolidityFieldTryStatementAttempt)
solidity_try_statement_attempt_f(x, as(y, SolidityFieldTryStatementAttempt)) :- solidity_try_statement(x), solidity_field(x, "attempt", y).
.decl solidity_try_statement_body_f(x: SolidityTryStatement, y: SolidityBlockStatement)
solidity_try_statement_body_f(x, as(y, SolidityBlockStatement)) :- solidity_try_statement(x), solidity_field(x, "body", y).
.decl solidity_try_statement_catch_clause_c(x: SolidityTryStatement, y: SolidityCatchClause)
solidity_try_statement_catch_clause_c(x, as(y, SolidityCatchClause)) :- solidity_try_statement(x), solidity_child(x, y).
.decl solidity_try_statement_parameter_c(x: SolidityTryStatement, y: SolidityParameter)
solidity_try_statement_parameter_c(x, as(y, SolidityParameter)) :- solidity_try_statement(x), solidity_child(x, y).

.type SolidityTupleExpression <: symbol
.decl solidity_tuple_expression(x: SolidityTupleExpression)
solidity_tuple_expression(as(x, SolidityTupleExpression)) :- solidity_node(x, "tuple_expression", _, _, _, _, _, _, _, _, _, _, _).
.decl solidity_tuple_expression_array_access_c(x: SolidityTupleExpression, y: SolidityArrayAccess)
solidity_tuple_expression_array_access_c(x, as(y, SolidityArrayAccess)) :- solidity_tuple_expression(x), solidity_child(x, y).
.decl solidity_tuple_expression_assignment_expression_c(x: SolidityTupleExpression, y: SolidityAssignmentExpression)
solidity_tuple_expression_assignment_expression_c(x, as(y, SolidityAssignmentExpression)) :- solidity_tuple_expression(x), solidity_child(x, y).
.decl solidity_tuple_expression_augmented_assignment_expression_c(x: SolidityTupleExpression, y: SolidityAugmentedAssignmentExpression)
solidity_tuple_expression_augmented_assignment_expression_c(x, as(y, SolidityAugmentedAssignmentExpression)) :- solidity_tuple_expression(x), solidity_child(x, y).
.decl solidity_tuple_expression_binary_expression_c(x: SolidityTupleExpression, y: SolidityBinaryExpression)
solidity_tuple_expression_binary_expression_c(x, as(y, SolidityBinaryExpression)) :- solidity_tuple_expression(x), solidity_child(x, y).
.decl solidity_tuple_expression_boolean_literal_c(x: SolidityTupleExpression, y: SolidityBooleanLiteral)
solidity_tuple_expression_boolean_literal_c(x, as(y, SolidityBooleanLiteral)) :- solidity_tuple_expression(x), solidity_child(x, y).
.decl solidity_tuple_expression_call_expression_c(x: SolidityTupleExpression, y: SolidityCallExpression)
solidity_tuple_expression_call_expression_c(x, as(y, SolidityCallExpression)) :- solidity_tuple_expression(x), solidity_child(x, y).
.decl solidity_tuple_expression_hex_string_literal_c(x: SolidityTupleExpression, y: SolidityHexStringLiteral)
solidity_tuple_expression_hex_string_literal_c(x, as(y, SolidityHexStringLiteral)) :- solidity_tuple_expression(x), solidity_child(x, y).
.decl solidity_tuple_expression_identifier_c(x: SolidityTupleExpression, y: SolidityIdentifier)
solidity_tuple_expression_identifier_c(x, as(y, SolidityIdentifier)) :- solidity_tuple_expression(x), solidity_child(x, y).
.decl solidity_tuple_expression_inline_array_expression_c(x: SolidityTupleExpression, y: SolidityInlineArrayExpression)
solidity_tuple_expression_inline_array_expression_c(x, as(y, SolidityInlineArrayExpression)) :- solidity_tuple_expression(x), solidity_child(x, y).
.decl solidity_tuple_expression_member_expression_c(x: SolidityTupleExpression, y: SolidityMemberExpression)
solidity_tuple_expression_member_expression_c(x, as(y, SolidityMemberExpression)) :- solidity_tuple_expression(x), solidity_child(x, y).
.decl solidity_tuple_expression_meta_type_expression_c(x: SolidityTupleExpression, y: SolidityMetaTypeExpression)
solidity_tuple_expression_meta_type_expression_c(x, as(y, SolidityMetaTypeExpression)) :- solidity_tuple_expression(x), solidity_child(x, y).
.decl solidity_tuple_expression_new_expression_c(x: SolidityTupleExpression, y: SolidityNewExpression)
solidity_tuple_expression_new_expression_c(x, as(y, SolidityNewExpression)) :- solidity_tuple_expression(x), solidity_child(x, y).
.decl solidity_tuple_expression_number_literal_c(x: SolidityTupleExpression, y: SolidityNumberLiteral)
solidity_tuple_expression_number_literal_c(x, as(y, SolidityNumberLiteral)) :- solidity_tuple_expression(x), solidity_child(x, y).
.decl solidity_tuple_expression_parenthesized_expression_c(x: SolidityTupleExpression, y: SolidityParenthesizedExpression)
solidity_tuple_expression_parenthesized_expression_c(x, as(y, SolidityParenthesizedExpression)) :- solidity_tuple_expression(x), solidity_child(x, y).
.decl solidity_tuple_expression_payable_conversion_expression_c(x: SolidityTupleExpression, y: SolidityPayableConversionExpression)
solidity_tuple_expression_payable_conversion_expression_c(x, as(y, SolidityPayableConversionExpression)) :- solidity_tuple_expression(x), solidity_child(x, y).
.decl solidity_tuple_expression_primitive_type_c(x: SolidityTupleExpression, y: SolidityPrimitiveType)
solidity_tuple_expression_primitive_type_c(x, as(y, SolidityPrimitiveType)) :- solidity_tuple_expression(x), solidity_child(x, y).
.decl solidity_tuple_expression_slice_access_c(x: SolidityTupleExpression, y: SoliditySliceAccess)
solidity_tuple_expression_slice_access_c(x, as(y, SoliditySliceAccess)) :- solidity_tuple_expression(x), solidity_child(x, y).
.decl solidity_tuple_expression_string_literal_c(x: SolidityTupleExpression, y: SolidityStringLiteral)
solidity_tuple_expression_string_literal_c(x, as(y, SolidityStringLiteral)) :- solidity_tuple_expression(x), solidity_child(x, y).
.decl solidity_tuple_expression_struct_expression_c(x: SolidityTupleExpression, y: SolidityStructExpression)
solidity_tuple_expression_struct_expression_c(x, as(y, SolidityStructExpression)) :- solidity_tuple_expression(x), solidity_child(x, y).
.decl solidity_tuple_expression_ternary_expression_c(x: SolidityTupleExpression, y: SolidityTernaryExpression)
solidity_tuple_expression_ternary_expression_c(x, as(y, SolidityTernaryExpression)) :- solidity_tuple_expression(x), solidity_child(x, y).
.decl solidity_tuple_expression_tuple_expression_c(x: SolidityTupleExpression, y: SolidityTupleExpression)
solidity_tuple_expression_tuple_expression_c(x, as(y, SolidityTupleExpression)) :- solidity_tuple_expression(x), solidity_child(x, y).
.decl solidity_tuple_expression_type_cast_expression_c(x: SolidityTupleExpression, y: SolidityTypeCastExpression)
solidity_tuple_expression_type_cast_expression_c(x, as(y, SolidityTypeCastExpression)) :- solidity_tuple_expression(x), solidity_child(x, y).
.decl solidity_tuple_expression_unary_expression_c(x: SolidityTupleExpression, y: SolidityUnaryExpression)
solidity_tuple_expression_unary_expression_c(x, as(y, SolidityUnaryExpression)) :- solidity_tuple_expression(x), solidity_child(x, y).
.decl solidity_tuple_expression_unicode_string_literal_c(x: SolidityTupleExpression, y: SolidityUnicodeStringLiteral)
solidity_tuple_expression_unicode_string_literal_c(x, as(y, SolidityUnicodeStringLiteral)) :- solidity_tuple_expression(x), solidity_child(x, y).
.decl solidity_tuple_expression_update_expression_c(x: SolidityTupleExpression, y: SolidityUpdateExpression)
solidity_tuple_expression_update_expression_c(x, as(y, SolidityUpdateExpression)) :- solidity_tuple_expression(x), solidity_child(x, y).
.decl solidity_tuple_expression_user_defined_type_c(x: SolidityTupleExpression, y: SolidityUserDefinedType)
solidity_tuple_expression_user_defined_type_c(x, as(y, SolidityUserDefinedType)) :- solidity_tuple_expression(x), solidity_child(x, y).

.type SolidityTypeAlias <: symbol
.decl solidity_type_alias(x: SolidityTypeAlias)
solidity_type_alias(as(x, SolidityTypeAlias)) :- solidity_node(x, "type_alias", _, _, _, _, _, _, _, _, _, _, _).
.decl solidity_type_alias_identifier_c(x: SolidityTypeAlias, y: SolidityIdentifier)
solidity_type_alias_identifier_c(x, as(y, SolidityIdentifier)) :- solidity_type_alias(x), solidity_child(x, y).

.type SolidityTypeCastExpression <: symbol
.decl solidity_type_cast_expression(x: SolidityTypeCastExpression)
solidity_type_cast_expression(as(x, SolidityTypeCastExpression)) :- solidity_node(x, "type_cast_expression", _, _, _, _, _, _, _, _, _, _, _).
.decl solidity_type_cast_expression_array_access_c(x: SolidityTypeCastExpression, y: SolidityArrayAccess)
solidity_type_cast_expression_array_access_c(x, as(y, SolidityArrayAccess)) :- solidity_type_cast_expression(x), solidity_child(x, y).
.decl solidity_type_cast_expression_assignment_expression_c(x: SolidityTypeCastExpression, y: SolidityAssignmentExpression)
solidity_type_cast_expression_assignment_expression_c(x, as(y, SolidityAssignmentExpression)) :- solidity_type_cast_expression(x), solidity_child(x, y).
.decl solidity_type_cast_expression_augmented_assignment_expression_c(x: SolidityTypeCastExpression, y: SolidityAugmentedAssignmentExpression)
solidity_type_cast_expression_augmented_assignment_expression_c(x, as(y, SolidityAugmentedAssignmentExpression)) :- solidity_type_cast_expression(x), solidity_child(x, y).
.decl solidity_type_cast_expression_binary_expression_c(x: SolidityTypeCastExpression, y: SolidityBinaryExpression)
solidity_type_cast_expression_binary_expression_c(x, as(y, SolidityBinaryExpression)) :- solidity_type_cast_expression(x), solidity_child(x, y).
.decl solidity_type_cast_expression_boolean_literal_c(x: SolidityTypeCastExpression, y: SolidityBooleanLiteral)
solidity_type_cast_expression_boolean_literal_c(x, as(y, SolidityBooleanLiteral)) :- solidity_type_cast_expression(x), solidity_child(x, y).
.decl solidity_type_cast_expression_call_expression_c(x: SolidityTypeCastExpression, y: SolidityCallExpression)
solidity_type_cast_expression_call_expression_c(x, as(y, SolidityCallExpression)) :- solidity_type_cast_expression(x), solidity_child(x, y).
.decl solidity_type_cast_expression_hex_string_literal_c(x: SolidityTypeCastExpression, y: SolidityHexStringLiteral)
solidity_type_cast_expression_hex_string_literal_c(x, as(y, SolidityHexStringLiteral)) :- solidity_type_cast_expression(x), solidity_child(x, y).
.decl solidity_type_cast_expression_identifier_c(x: SolidityTypeCastExpression, y: SolidityIdentifier)
solidity_type_cast_expression_identifier_c(x, as(y, SolidityIdentifier)) :- solidity_type_cast_expression(x), solidity_child(x, y).
.decl solidity_type_cast_expression_inline_array_expression_c(x: SolidityTypeCastExpression, y: SolidityInlineArrayExpression)
solidity_type_cast_expression_inline_array_expression_c(x, as(y, SolidityInlineArrayExpression)) :- solidity_type_cast_expression(x), solidity_child(x, y).
.decl solidity_type_cast_expression_member_expression_c(x: SolidityTypeCastExpression, y: SolidityMemberExpression)
solidity_type_cast_expression_member_expression_c(x, as(y, SolidityMemberExpression)) :- solidity_type_cast_expression(x), solidity_child(x, y).
.decl solidity_type_cast_expression_meta_type_expression_c(x: SolidityTypeCastExpression, y: SolidityMetaTypeExpression)
solidity_type_cast_expression_meta_type_expression_c(x, as(y, SolidityMetaTypeExpression)) :- solidity_type_cast_expression(x), solidity_child(x, y).
.decl solidity_type_cast_expression_new_expression_c(x: SolidityTypeCastExpression, y: SolidityNewExpression)
solidity_type_cast_expression_new_expression_c(x, as(y, SolidityNewExpression)) :- solidity_type_cast_expression(x), solidity_child(x, y).
.decl solidity_type_cast_expression_number_literal_c(x: SolidityTypeCastExpression, y: SolidityNumberLiteral)
solidity_type_cast_expression_number_literal_c(x, as(y, SolidityNumberLiteral)) :- solidity_type_cast_expression(x), solidity_child(x, y).
.decl solidity_type_cast_expression_parenthesized_expression_c(x: SolidityTypeCastExpression, y: SolidityParenthesizedExpression)
solidity_type_cast_expression_parenthesized_expression_c(x, as(y, SolidityParenthesizedExpression)) :- solidity_type_cast_expression(x), solidity_child(x, y).
.decl solidity_type_cast_expression_payable_conversion_expression_c(x: SolidityTypeCastExpression, y: SolidityPayableConversionExpression)
solidity_type_cast_expression_payable_conversion_expression_c(x, as(y, SolidityPayableConversionExpression)) :- solidity_type_cast_expression(x), solidity_child(x, y).
.decl solidity_type_cast_expression_primitive_type_c(x: SolidityTypeCastExpression, y: SolidityPrimitiveType)
solidity_type_cast_expression_primitive_type_c(x, as(y, SolidityPrimitiveType)) :- solidity_type_cast_expression(x), solidity_child(x, y).
.decl solidity_type_cast_expression_slice_access_c(x: SolidityTypeCastExpression, y: SoliditySliceAccess)
solidity_type_cast_expression_slice_access_c(x, as(y, SoliditySliceAccess)) :- solidity_type_cast_expression(x), solidity_child(x, y).
.decl solidity_type_cast_expression_string_literal_c(x: SolidityTypeCastExpression, y: SolidityStringLiteral)
solidity_type_cast_expression_string_literal_c(x, as(y, SolidityStringLiteral)) :- solidity_type_cast_expression(x), solidity_child(x, y).
.decl solidity_type_cast_expression_struct_expression_c(x: SolidityTypeCastExpression, y: SolidityStructExpression)
solidity_type_cast_expression_struct_expression_c(x, as(y, SolidityStructExpression)) :- solidity_type_cast_expression(x), solidity_child(x, y).
.decl solidity_type_cast_expression_ternary_expression_c(x: SolidityTypeCastExpression, y: SolidityTernaryExpression)
solidity_type_cast_expression_ternary_expression_c(x, as(y, SolidityTernaryExpression)) :- solidity_type_cast_expression(x), solidity_child(x, y).
.decl solidity_type_cast_expression_tuple_expression_c(x: SolidityTypeCastExpression, y: SolidityTupleExpression)
solidity_type_cast_expression_tuple_expression_c(x, as(y, SolidityTupleExpression)) :- solidity_type_cast_expression(x), solidity_child(x, y).
.decl solidity_type_cast_expression_type_cast_expression_c(x: SolidityTypeCastExpression, y: SolidityTypeCastExpression)
solidity_type_cast_expression_type_cast_expression_c(x, as(y, SolidityTypeCastExpression)) :- solidity_type_cast_expression(x), solidity_child(x, y).
.decl solidity_type_cast_expression_unary_expression_c(x: SolidityTypeCastExpression, y: SolidityUnaryExpression)
solidity_type_cast_expression_unary_expression_c(x, as(y, SolidityUnaryExpression)) :- solidity_type_cast_expression(x), solidity_child(x, y).
.decl solidity_type_cast_expression_unicode_string_literal_c(x: SolidityTypeCastExpression, y: SolidityUnicodeStringLiteral)
solidity_type_cast_expression_unicode_string_literal_c(x, as(y, SolidityUnicodeStringLiteral)) :- solidity_type_cast_expression(x), solidity_child(x, y).
.decl solidity_type_cast_expression_update_expression_c(x: SolidityTypeCastExpression, y: SolidityUpdateExpression)
solidity_type_cast_expression_update_expression_c(x, as(y, SolidityUpdateExpression)) :- solidity_type_cast_expression(x), solidity_child(x, y).
.decl solidity_type_cast_expression_user_defined_type_c(x: SolidityTypeCastExpression, y: SolidityUserDefinedType)
solidity_type_cast_expression_user_defined_type_c(x, as(y, SolidityUserDefinedType)) :- solidity_type_cast_expression(x), solidity_child(x, y).

.type SolidityTypeName <: symbol
.decl solidity_type_name(x: SolidityTypeName)
solidity_type_name(as(x, SolidityTypeName)) :- solidity_node(x, "type_name", _, _, _, _, _, _, _, _, _, _, _).
.decl solidity_type_name_parameters_f(x: SolidityTypeName, y: SolidityParameter)
solidity_type_name_parameters_f(x, as(y, SolidityParameter)) :- solidity_type_name(x), solidity_field(x, "parameters", y).
.decl solidity_type_name_value_type_f(x: SolidityTypeName, y: SolidityTypeName)
solidity_type_name_value_type_f(x, as(y, SolidityTypeName)) :- solidity_type_name(x), solidity_field(x, "value_type", y).
.type SolidityFieldTypeNameKeyType = SolidityPrimitiveType | SolidityUserDefinedType
.decl solidity_type_name_key_type_f(x: SolidityTypeName, y: SolidityFieldTypeNameKeyType)
solidity_type_name_key_type_f(x, as(y, SolidityFieldTypeNameKeyType)) :- solidity_type_name(x), solidity_field(x, "key_type", y).
.decl solidity_type_name_array_access_c(x: SolidityTypeName, y: SolidityArrayAccess)
solidity_type_name_array_access_c(x, as(y, SolidityArrayAccess)) :- solidity_type_name(x), solidity_child(x, y).
.decl solidity_type_name_assignment_expression_c(x: SolidityTypeName, y: SolidityAssignmentExpression)
solidity_type_name_assignment_expression_c(x, as(y, SolidityAssignmentExpression)) :- solidity_type_name(x), solidity_child(x, y).
.decl solidity_type_name_augmented_assignment_expression_c(x: SolidityTypeName, y: SolidityAugmentedAssignmentExpression)
solidity_type_name_augmented_assignment_expression_c(x, as(y, SolidityAugmentedAssignmentExpression)) :- solidity_type_name(x), solidity_child(x, y).
.decl solidity_type_name_binary_expression_c(x: SolidityTypeName, y: SolidityBinaryExpression)
solidity_type_name_binary_expression_c(x, as(y, SolidityBinaryExpression)) :- solidity_type_name(x), solidity_child(x, y).
.decl solidity_type_name_boolean_literal_c(x: SolidityTypeName, y: SolidityBooleanLiteral)
solidity_type_name_boolean_literal_c(x, as(y, SolidityBooleanLiteral)) :- solidity_type_name(x), solidity_child(x, y).
.decl solidity_type_name_call_expression_c(x: SolidityTypeName, y: SolidityCallExpression)
solidity_type_name_call_expression_c(x, as(y, SolidityCallExpression)) :- solidity_type_name(x), solidity_child(x, y).
.decl solidity_type_name_hex_string_literal_c(x: SolidityTypeName, y: SolidityHexStringLiteral)
solidity_type_name_hex_string_literal_c(x, as(y, SolidityHexStringLiteral)) :- solidity_type_name(x), solidity_child(x, y).
.decl solidity_type_name_identifier_c(x: SolidityTypeName, y: SolidityIdentifier)
solidity_type_name_identifier_c(x, as(y, SolidityIdentifier)) :- solidity_type_name(x), solidity_child(x, y).
.decl solidity_type_name_inline_array_expression_c(x: SolidityTypeName, y: SolidityInlineArrayExpression)
solidity_type_name_inline_array_expression_c(x, as(y, SolidityInlineArrayExpression)) :- solidity_type_name(x), solidity_child(x, y).
.decl solidity_type_name_member_expression_c(x: SolidityTypeName, y: SolidityMemberExpression)
solidity_type_name_member_expression_c(x, as(y, SolidityMemberExpression)) :- solidity_type_name(x), solidity_child(x, y).
.decl solidity_type_name_meta_type_expression_c(x: SolidityTypeName, y: SolidityMetaTypeExpression)
solidity_type_name_meta_type_expression_c(x, as(y, SolidityMetaTypeExpression)) :- solidity_type_name(x), solidity_child(x, y).
.decl solidity_type_name_new_expression_c(x: SolidityTypeName, y: SolidityNewExpression)
solidity_type_name_new_expression_c(x, as(y, SolidityNewExpression)) :- solidity_type_name(x), solidity_child(x, y).
.decl solidity_type_name_number_literal_c(x: SolidityTypeName, y: SolidityNumberLiteral)
solidity_type_name_number_literal_c(x, as(y, SolidityNumberLiteral)) :- solidity_type_name(x), solidity_child(x, y).
.decl solidity_type_name_parenthesized_expression_c(x: SolidityTypeName, y: SolidityParenthesizedExpression)
solidity_type_name_parenthesized_expression_c(x, as(y, SolidityParenthesizedExpression)) :- solidity_type_name(x), solidity_child(x, y).
.decl solidity_type_name_payable_conversion_expression_c(x: SolidityTypeName, y: SolidityPayableConversionExpression)
solidity_type_name_payable_conversion_expression_c(x, as(y, SolidityPayableConversionExpression)) :- solidity_type_name(x), solidity_child(x, y).
.decl solidity_type_name_primitive_type_c(x: SolidityTypeName, y: SolidityPrimitiveType)
solidity_type_name_primitive_type_c(x, as(y, SolidityPrimitiveType)) :- solidity_type_name(x), solidity_child(x, y).
.decl solidity_type_name_return_parameter_c(x: SolidityTypeName, y: SolidityReturnParameter)
solidity_type_name_return_parameter_c(x, as(y, SolidityReturnParameter)) :- solidity_type_name(x), solidity_child(x, y).
.decl solidity_type_name_slice_access_c(x: SolidityTypeName, y: SoliditySliceAccess)
solidity_type_name_slice_access_c(x, as(y, SoliditySliceAccess)) :- solidity_type_name(x), solidity_child(x, y).
.decl solidity_type_name_state_mutability_c(x: SolidityTypeName, y: SolidityStateMutability)
solidity_type_name_state_mutability_c(x, as(y, SolidityStateMutability)) :- solidity_type_name(x), solidity_child(x, y).
.decl solidity_type_name_string_literal_c(x: SolidityTypeName, y: SolidityStringLiteral)
solidity_type_name_string_literal_c(x, as(y, SolidityStringLiteral)) :- solidity_type_name(x), solidity_child(x, y).
.decl solidity_type_name_struct_expression_c(x: SolidityTypeName, y: SolidityStructExpression)
solidity_type_name_struct_expression_c(x, as(y, SolidityStructExpression)) :- solidity_type_name(x), solidity_child(x, y).
.decl solidity_type_name_ternary_expression_c(x: SolidityTypeName, y: SolidityTernaryExpression)
solidity_type_name_ternary_expression_c(x, as(y, SolidityTernaryExpression)) :- solidity_type_name(x), solidity_child(x, y).
.decl solidity_type_name_tuple_expression_c(x: SolidityTypeName, y: SolidityTupleExpression)
solidity_type_name_tuple_expression_c(x, as(y, SolidityTupleExpression)) :- solidity_type_name(x), solidity_child(x, y).
.decl solidity_type_name_type_cast_expression_c(x: SolidityTypeName, y: SolidityTypeCastExpression)
solidity_type_name_type_cast_expression_c(x, as(y, SolidityTypeCastExpression)) :- solidity_type_name(x), solidity_child(x, y).
.decl solidity_type_name_type_name_c(x: SolidityTypeName, y: SolidityTypeName)
solidity_type_name_type_name_c(x, as(y, SolidityTypeName)) :- solidity_type_name(x), solidity_child(x, y).
.decl solidity_type_name_unary_expression_c(x: SolidityTypeName, y: SolidityUnaryExpression)
solidity_type_name_unary_expression_c(x, as(y, SolidityUnaryExpression)) :- solidity_type_name(x), solidity_child(x, y).
.decl solidity_type_name_unicode_string_literal_c(x: SolidityTypeName, y: SolidityUnicodeStringLiteral)
solidity_type_name_unicode_string_literal_c(x, as(y, SolidityUnicodeStringLiteral)) :- solidity_type_name(x), solidity_child(x, y).
.decl solidity_type_name_update_expression_c(x: SolidityTypeName, y: SolidityUpdateExpression)
solidity_type_name_update_expression_c(x, as(y, SolidityUpdateExpression)) :- solidity_type_name(x), solidity_child(x, y).
.decl solidity_type_name_user_defined_type_c(x: SolidityTypeName, y: SolidityUserDefinedType)
solidity_type_name_user_defined_type_c(x, as(y, SolidityUserDefinedType)) :- solidity_type_name(x), solidity_child(x, y).
.decl solidity_type_name_visibility_c(x: SolidityTypeName, y: SolidityVisibility)
solidity_type_name_visibility_c(x, as(y, SolidityVisibility)) :- solidity_type_name(x), solidity_child(x, y).

.type SolidityUnaryExpression <: symbol
.decl solidity_unary_expression(x: SolidityUnaryExpression)
solidity_unary_expression(as(x, SolidityUnaryExpression)) :- solidity_node(x, "unary_expression", _, _, _, _, _, _, _, _, _, _, _).
.type SolidityFieldUnaryExpressionArgument = SolidityArrayAccess | SolidityAssignmentExpression | SolidityAugmentedAssignmentExpression | SolidityBinaryExpression | SolidityBooleanLiteral | SolidityCallExpression | SolidityHexStringLiteral | SolidityIdentifier | SolidityInlineArrayExpression | SolidityMemberExpression | SolidityMetaTypeExpression | SolidityNewExpression | SolidityNumberLiteral | SolidityParenthesizedExpression | SolidityPayableConversionExpression | SolidityPrimitiveType | SoliditySliceAccess | SolidityStringLiteral | SolidityStructExpression | SolidityTernaryExpression | SolidityTupleExpression | SolidityTypeCastExpression | SolidityUnaryExpression | SolidityUnicodeStringLiteral | SolidityUpdateExpression | SolidityUserDefinedType
.decl solidity_unary_expression_argument_f(x: SolidityUnaryExpression, y: SolidityFieldUnaryExpressionArgument)
solidity_unary_expression_argument_f(x, as(y, SolidityFieldUnaryExpressionArgument)) :- solidity_unary_expression(x), solidity_field(x, "argument", y).

.type SolidityUnicodeStringLiteral <: symbol
.decl solidity_unicode_string_literal(x: SolidityUnicodeStringLiteral)
solidity_unicode_string_literal(as(x, SolidityUnicodeStringLiteral)) :- solidity_node(x, "unicode_string_literal", _, _, _, _, _, _, _, _, _, _, _).

.type SolidityUpdateExpression <: symbol
.decl solidity_update_expression(x: SolidityUpdateExpression)
solidity_update_expression(as(x, SolidityUpdateExpression)) :- solidity_node(x, "update_expression", _, _, _, _, _, _, _, _, _, _, _).
.type SolidityFieldUpdateExpressionArgument = SolidityArrayAccess | SolidityAssignmentExpression | SolidityAugmentedAssignmentExpression | SolidityBinaryExpression | SolidityBooleanLiteral | SolidityCallExpression | SolidityHexStringLiteral | SolidityIdentifier | SolidityInlineArrayExpression | SolidityMemberExpression | SolidityMetaTypeExpression | SolidityNewExpression | SolidityNumberLiteral | SolidityParenthesizedExpression | SolidityPayableConversionExpression | SolidityPrimitiveType | SoliditySliceAccess | SolidityStringLiteral | SolidityStructExpression | SolidityTernaryExpression | SolidityTupleExpression | SolidityTypeCastExpression | SolidityUnaryExpression | SolidityUnicodeStringLiteral | SolidityUpdateExpression | SolidityUserDefinedType
.decl solidity_update_expression_argument_f(x: SolidityUpdateExpression, y: SolidityFieldUpdateExpressionArgument)
solidity_update_expression_argument_f(x, as(y, SolidityFieldUpdateExpressionArgument)) :- solidity_update_expression(x), solidity_field(x, "argument", y).

.type SolidityUserDefinedType <: symbol
.decl solidity_user_defined_type(x: SolidityUserDefinedType)
solidity_user_defined_type(as(x, SolidityUserDefinedType)) :- solidity_node(x, "user_defined_type", _, _, _, _, _, _, _, _, _, _, _).
.decl solidity_user_defined_type_identifier_c(x: SolidityUserDefinedType, y: SolidityIdentifier)
solidity_user_defined_type_identifier_c(x, as(y, SolidityIdentifier)) :- solidity_user_defined_type(x), solidity_child(x, y).

.type SolidityUserDefinedTypeDefinition <: symbol
.decl solidity_user_defined_type_definition(x: SolidityUserDefinedTypeDefinition)
solidity_user_defined_type_definition(as(x, SolidityUserDefinedTypeDefinition)) :- solidity_node(x, "user_defined_type_definition", _, _, _, _, _, _, _, _, _, _, _).
.decl solidity_user_defined_type_definition_name_f(x: SolidityUserDefinedTypeDefinition, y: SolidityIdentifier)
solidity_user_defined_type_definition_name_f(x, as(y, SolidityIdentifier)) :- solidity_user_defined_type_definition(x), solidity_field(x, "name", y).
.decl solidity_user_defined_type_definition_primitive_type_c(x: SolidityUserDefinedTypeDefinition, y: SolidityPrimitiveType)
solidity_user_defined_type_definition_primitive_type_c(x, as(y, SolidityPrimitiveType)) :- solidity_user_defined_type_definition(x), solidity_child(x, y).

.type SolidityUsingDirective <: symbol
.decl solidity_using_directive(x: SolidityUsingDirective)
solidity_using_directive(as(x, SolidityUsingDirective)) :- solidity_node(x, "using_directive", _, _, _, _, _, _, _, _, _, _, _).
.type SolidityFieldUsingDirectiveSource = SolidityAnySourceType | SolidityTypeName
.decl solidity_using_directive_source_f(x: SolidityUsingDirective, y: SolidityFieldUsingDirectiveSource)
solidity_using_directive_source_f(x, as(y, SolidityFieldUsingDirectiveSource)) :- solidity_using_directive(x), solidity_field(x, "source", y).
.decl solidity_using_directive_type_alias_c(x: SolidityUsingDirective, y: SolidityTypeAlias)
solidity_using_directive_type_alias_c(x, as(y, SolidityTypeAlias)) :- solidity_using_directive(x), solidity_child(x, y).

.type SolidityVariableDeclaration <: symbol
.decl solidity_variable_declaration(x: SolidityVariableDeclaration)
solidity_variable_declaration(as(x, SolidityVariableDeclaration)) :- solidity_node(x, "variable_declaration", _, _, _, _, _, _, _, _, _, _, _).
.decl solidity_variable_declaration_type_f(x: SolidityVariableDeclaration, y: SolidityTypeName)
solidity_variable_declaration_type_f(x, as(y, SolidityTypeName)) :- solidity_variable_declaration(x), solidity_field(x, "type", y).
.decl solidity_variable_declaration_name_f(x: SolidityVariableDeclaration, y: SolidityIdentifier)
solidity_variable_declaration_name_f(x, as(y, SolidityIdentifier)) :- solidity_variable_declaration(x), solidity_field(x, "name", y).

.type SolidityVariableDeclarationStatement <: symbol
.decl solidity_variable_declaration_statement(x: SolidityVariableDeclarationStatement)
solidity_variable_declaration_statement(as(x, SolidityVariableDeclarationStatement)) :- solidity_node(x, "variable_declaration_statement", _, _, _, _, _, _, _, _, _, _, _).
.type SolidityFieldVariableDeclarationStatementValue = SolidityArrayAccess | SolidityAssignmentExpression | SolidityAugmentedAssignmentExpression | SolidityBinaryExpression | SolidityBooleanLiteral | SolidityCallExpression | SolidityHexStringLiteral | SolidityIdentifier | SolidityInlineArrayExpression | SolidityMemberExpression | SolidityMetaTypeExpression | SolidityNewExpression | SolidityNumberLiteral | SolidityParenthesizedExpression | SolidityPayableConversionExpression | SolidityPrimitiveType | SoliditySliceAccess | SolidityStringLiteral | SolidityStructExpression | SolidityTernaryExpression | SolidityTupleExpression | SolidityTypeCastExpression | SolidityUnaryExpression | SolidityUnicodeStringLiteral | SolidityUpdateExpression | SolidityUserDefinedType
.decl solidity_variable_declaration_statement_value_f(x: SolidityVariableDeclarationStatement, y: SolidityFieldVariableDeclarationStatementValue)
solidity_variable_declaration_statement_value_f(x, as(y, SolidityFieldVariableDeclarationStatementValue)) :- solidity_variable_declaration_statement(x), solidity_field(x, "value", y).
.decl solidity_variable_declaration_statement_variable_declaration_c(x: SolidityVariableDeclarationStatement, y: SolidityVariableDeclaration)
solidity_variable_declaration_statement_variable_declaration_c(x, as(y, SolidityVariableDeclaration)) :- solidity_variable_declaration_statement(x), solidity_child(x, y).
.decl solidity_variable_declaration_statement_variable_declaration_tuple_c(x: SolidityVariableDeclarationStatement, y: SolidityVariableDeclarationTuple)
solidity_variable_declaration_statement_variable_declaration_tuple_c(x, as(y, SolidityVariableDeclarationTuple)) :- solidity_variable_declaration_statement(x), solidity_child(x, y).

.type SolidityVariableDeclarationTuple <: symbol
.decl solidity_variable_declaration_tuple(x: SolidityVariableDeclarationTuple)
solidity_variable_declaration_tuple(as(x, SolidityVariableDeclarationTuple)) :- solidity_node(x, "variable_declaration_tuple", _, _, _, _, _, _, _, _, _, _, _).
.decl solidity_variable_declaration_tuple_identifier_c(x: SolidityVariableDeclarationTuple, y: SolidityIdentifier)
solidity_variable_declaration_tuple_identifier_c(x, as(y, SolidityIdentifier)) :- solidity_variable_declaration_tuple(x), solidity_child(x, y).
.decl solidity_variable_declaration_tuple_variable_declaration_c(x: SolidityVariableDeclarationTuple, y: SolidityVariableDeclaration)
solidity_variable_declaration_tuple_variable_declaration_c(x, as(y, SolidityVariableDeclaration)) :- solidity_variable_declaration_tuple(x), solidity_child(x, y).

.type SolidityVisibility <: symbol
.decl solidity_visibility(x: SolidityVisibility)
solidity_visibility(as(x, SolidityVisibility)) :- solidity_node(x, "visibility", _, _, _, _, _, _, _, _, _, _, _).

.type SolidityWhileStatement <: symbol
.decl solidity_while_statement(x: SolidityWhileStatement)
solidity_while_statement(as(x, SolidityWhileStatement)) :- solidity_node(x, "while_statement", _, _, _, _, _, _, _, _, _, _, _).
.type SolidityFieldWhileStatementCondition = SolidityArrayAccess | SolidityAssignmentExpression | SolidityAugmentedAssignmentExpression | SolidityBinaryExpression | SolidityBooleanLiteral | SolidityCallExpression | SolidityHexStringLiteral | SolidityIdentifier | SolidityInlineArrayExpression | SolidityMemberExpression | SolidityMetaTypeExpression | SolidityNewExpression | SolidityNumberLiteral | SolidityParenthesizedExpression | SolidityPayableConversionExpression | SolidityPrimitiveType | SoliditySliceAccess | SolidityStringLiteral | SolidityStructExpression | SolidityTernaryExpression | SolidityTupleExpression | SolidityTypeCastExpression | SolidityUnaryExpression | SolidityUnicodeStringLiteral | SolidityUpdateExpression | SolidityUserDefinedType
.decl solidity_while_statement_condition_f(x: SolidityWhileStatement, y: SolidityFieldWhileStatementCondition)
solidity_while_statement_condition_f(x, as(y, SolidityFieldWhileStatementCondition)) :- solidity_while_statement(x), solidity_field(x, "condition", y).
.type SolidityFieldWhileStatementBody = SolidityAssemblyStatement | SolidityBlockStatement | SolidityBreakStatement | SolidityContinueStatement | SolidityDoWhileStatement | SolidityEmitStatement | SolidityExpressionStatement | SolidityForStatement | SolidityIfStatement | SolidityReturnStatement | SolidityRevertStatement | SolidityTryStatement | SolidityVariableDeclarationStatement | SolidityWhileStatement
.decl solidity_while_statement_body_f(x: SolidityWhileStatement, y: SolidityFieldWhileStatementBody)
solidity_while_statement_body_f(x, as(y, SolidityFieldWhileStatementBody)) :- solidity_while_statement(x), solidity_field(x, "body", y).

.type SolidityYulAssignment <: symbol
.decl solidity_yul_assignment(x: SolidityYulAssignment)
solidity_yul_assignment(as(x, SolidityYulAssignment)) :- solidity_node(x, "yul_assignment", _, _, _, _, _, _, _, _, _, _, _).
.decl solidity_yul_assignment_yul_boolean_c(x: SolidityYulAssignment, y: SolidityYulBoolean)
solidity_yul_assignment_yul_boolean_c(x, as(y, SolidityYulBoolean)) :- solidity_yul_assignment(x), solidity_child(x, y).
.decl solidity_yul_assignment_yul_decimal_number_c(x: SolidityYulAssignment, y: SolidityYulDecimalNumber)
solidity_yul_assignment_yul_decimal_number_c(x, as(y, SolidityYulDecimalNumber)) :- solidity_yul_assignment(x), solidity_child(x, y).
.decl solidity_yul_assignment_yul_function_call_c(x: SolidityYulAssignment, y: SolidityYulFunctionCall)
solidity_yul_assignment_yul_function_call_c(x, as(y, SolidityYulFunctionCall)) :- solidity_yul_assignment(x), solidity_child(x, y).
.decl solidity_yul_assignment_yul_hex_number_c(x: SolidityYulAssignment, y: SolidityYulHexNumber)
solidity_yul_assignment_yul_hex_number_c(x, as(y, SolidityYulHexNumber)) :- solidity_yul_assignment(x), solidity_child(x, y).
.decl solidity_yul_assignment_yul_path_c(x: SolidityYulAssignment, y: SolidityYulPath)
solidity_yul_assignment_yul_path_c(x, as(y, SolidityYulPath)) :- solidity_yul_assignment(x), solidity_child(x, y).
.decl solidity_yul_assignment_yul_string_literal_c(x: SolidityYulAssignment, y: SolidityYulStringLiteral)
solidity_yul_assignment_yul_string_literal_c(x, as(y, SolidityYulStringLiteral)) :- solidity_yul_assignment(x), solidity_child(x, y).

.type SolidityYulBlock <: symbol
.decl solidity_yul_block(x: SolidityYulBlock)
solidity_yul_block(as(x, SolidityYulBlock)) :- solidity_node(x, "yul_block", _, _, _, _, _, _, _, _, _, _, _).
.decl solidity_yul_block_yul_assignment_c(x: SolidityYulBlock, y: SolidityYulAssignment)
solidity_yul_block_yul_assignment_c(x, as(y, SolidityYulAssignment)) :- solidity_yul_block(x), solidity_child(x, y).
.decl solidity_yul_block_yul_block_c(x: SolidityYulBlock, y: SolidityYulBlock)
solidity_yul_block_yul_block_c(x, as(y, SolidityYulBlock)) :- solidity_yul_block(x), solidity_child(x, y).
.decl solidity_yul_block_yul_boolean_c(x: SolidityYulBlock, y: SolidityYulBoolean)
solidity_yul_block_yul_boolean_c(x, as(y, SolidityYulBoolean)) :- solidity_yul_block(x), solidity_child(x, y).
.decl solidity_yul_block_yul_break_c(x: SolidityYulBlock, y: SolidityYulBreak)
solidity_yul_block_yul_break_c(x, as(y, SolidityYulBreak)) :- solidity_yul_block(x), solidity_child(x, y).
.decl solidity_yul_block_yul_continue_c(x: SolidityYulBlock, y: SolidityYulContinue)
solidity_yul_block_yul_continue_c(x, as(y, SolidityYulContinue)) :- solidity_yul_block(x), solidity_child(x, y).
.decl solidity_yul_block_yul_decimal_number_c(x: SolidityYulBlock, y: SolidityYulDecimalNumber)
solidity_yul_block_yul_decimal_number_c(x, as(y, SolidityYulDecimalNumber)) :- solidity_yul_block(x), solidity_child(x, y).
.decl solidity_yul_block_yul_for_statement_c(x: SolidityYulBlock, y: SolidityYulForStatement)
solidity_yul_block_yul_for_statement_c(x, as(y, SolidityYulForStatement)) :- solidity_yul_block(x), solidity_child(x, y).
.decl solidity_yul_block_yul_function_call_c(x: SolidityYulBlock, y: SolidityYulFunctionCall)
solidity_yul_block_yul_function_call_c(x, as(y, SolidityYulFunctionCall)) :- solidity_yul_block(x), solidity_child(x, y).
.decl solidity_yul_block_yul_function_definition_c(x: SolidityYulBlock, y: SolidityYulFunctionDefinition)
solidity_yul_block_yul_function_definition_c(x, as(y, SolidityYulFunctionDefinition)) :- solidity_yul_block(x), solidity_child(x, y).
.decl solidity_yul_block_yul_hex_number_c(x: SolidityYulBlock, y: SolidityYulHexNumber)
solidity_yul_block_yul_hex_number_c(x, as(y, SolidityYulHexNumber)) :- solidity_yul_block(x), solidity_child(x, y).
.decl solidity_yul_block_yul_if_statement_c(x: SolidityYulBlock, y: SolidityYulIfStatement)
solidity_yul_block_yul_if_statement_c(x, as(y, SolidityYulIfStatement)) :- solidity_yul_block(x), solidity_child(x, y).
.decl solidity_yul_block_yul_label_c(x: SolidityYulBlock, y: SolidityYulLabel)
solidity_yul_block_yul_label_c(x, as(y, SolidityYulLabel)) :- solidity_yul_block(x), solidity_child(x, y).
.decl solidity_yul_block_yul_leave_c(x: SolidityYulBlock, y: SolidityYulLeave)
solidity_yul_block_yul_leave_c(x, as(y, SolidityYulLeave)) :- solidity_yul_block(x), solidity_child(x, y).
.decl solidity_yul_block_yul_string_literal_c(x: SolidityYulBlock, y: SolidityYulStringLiteral)
solidity_yul_block_yul_string_literal_c(x, as(y, SolidityYulStringLiteral)) :- solidity_yul_block(x), solidity_child(x, y).
.decl solidity_yul_block_yul_switch_statement_c(x: SolidityYulBlock, y: SolidityYulSwitchStatement)
solidity_yul_block_yul_switch_statement_c(x, as(y, SolidityYulSwitchStatement)) :- solidity_yul_block(x), solidity_child(x, y).
.decl solidity_yul_block_yul_variable_declaration_c(x: SolidityYulBlock, y: SolidityYulVariableDeclaration)
solidity_yul_block_yul_variable_declaration_c(x, as(y, SolidityYulVariableDeclaration)) :- solidity_yul_block(x), solidity_child(x, y).

.type SolidityYulBoolean <: symbol
.decl solidity_yul_boolean(x: SolidityYulBoolean)
solidity_yul_boolean(as(x, SolidityYulBoolean)) :- solidity_node(x, "yul_boolean", _, _, _, _, _, _, _, _, _, _, _).

.type SolidityYulBreak <: symbol
.decl solidity_yul_break(x: SolidityYulBreak)
solidity_yul_break(as(x, SolidityYulBreak)) :- solidity_node(x, "yul_break", _, _, _, _, _, _, _, _, _, _, _).

.type SolidityYulContinue <: symbol
.decl solidity_yul_continue(x: SolidityYulContinue)
solidity_yul_continue(as(x, SolidityYulContinue)) :- solidity_node(x, "yul_continue", _, _, _, _, _, _, _, _, _, _, _).

.type SolidityYulEvmBuiltin <: symbol
.decl solidity_yul_evm_builtin(x: SolidityYulEvmBuiltin)
solidity_yul_evm_builtin(as(x, SolidityYulEvmBuiltin)) :- solidity_node(x, "yul_evm_builtin", _, _, _, _, _, _, _, _, _, _, _).

.type SolidityYulForStatement <: symbol
.decl solidity_yul_for_statement(x: SolidityYulForStatement)
solidity_yul_for_statement(as(x, SolidityYulForStatement)) :- solidity_node(x, "yul_for_statement", _, _, _, _, _, _, _, _, _, _, _).
.decl solidity_yul_for_statement_yul_block_c(x: SolidityYulForStatement, y: SolidityYulBlock)
solidity_yul_for_statement_yul_block_c(x, as(y, SolidityYulBlock)) :- solidity_yul_for_statement(x), solidity_child(x, y).
.decl solidity_yul_for_statement_yul_boolean_c(x: SolidityYulForStatement, y: SolidityYulBoolean)
solidity_yul_for_statement_yul_boolean_c(x, as(y, SolidityYulBoolean)) :- solidity_yul_for_statement(x), solidity_child(x, y).
.decl solidity_yul_for_statement_yul_decimal_number_c(x: SolidityYulForStatement, y: SolidityYulDecimalNumber)
solidity_yul_for_statement_yul_decimal_number_c(x, as(y, SolidityYulDecimalNumber)) :- solidity_yul_for_statement(x), solidity_child(x, y).
.decl solidity_yul_for_statement_yul_function_call_c(x: SolidityYulForStatement, y: SolidityYulFunctionCall)
solidity_yul_for_statement_yul_function_call_c(x, as(y, SolidityYulFunctionCall)) :- solidity_yul_for_statement(x), solidity_child(x, y).
.decl solidity_yul_for_statement_yul_hex_number_c(x: SolidityYulForStatement, y: SolidityYulHexNumber)
solidity_yul_for_statement_yul_hex_number_c(x, as(y, SolidityYulHexNumber)) :- solidity_yul_for_statement(x), solidity_child(x, y).
.decl solidity_yul_for_statement_yul_path_c(x: SolidityYulForStatement, y: SolidityYulPath)
solidity_yul_for_statement_yul_path_c(x, as(y, SolidityYulPath)) :- solidity_yul_for_statement(x), solidity_child(x, y).
.decl solidity_yul_for_statement_yul_string_literal_c(x: SolidityYulForStatement, y: SolidityYulStringLiteral)
solidity_yul_for_statement_yul_string_literal_c(x, as(y, SolidityYulStringLiteral)) :- solidity_yul_for_statement(x), solidity_child(x, y).

.type SolidityYulFunctionCall <: symbol
.decl solidity_yul_function_call(x: SolidityYulFunctionCall)
solidity_yul_function_call(as(x, SolidityYulFunctionCall)) :- solidity_node(x, "yul_function_call", _, _, _, _, _, _, _, _, _, _, _).
.type SolidityFieldYulFunctionCallFunction = SolidityYulEvmBuiltin | SolidityYulIdentifier
.decl solidity_yul_function_call_function_f(x: SolidityYulFunctionCall, y: SolidityFieldYulFunctionCallFunction)
solidity_yul_function_call_function_f(x, as(y, SolidityFieldYulFunctionCallFunction)) :- solidity_yul_function_call(x), solidity_field(x, "function", y).
.decl solidity_yul_function_call_yul_boolean_c(x: SolidityYulFunctionCall, y: SolidityYulBoolean)
solidity_yul_function_call_yul_boolean_c(x, as(y, SolidityYulBoolean)) :- solidity_yul_function_call(x), solidity_child(x, y).
.decl solidity_yul_function_call_yul_decimal_number_c(x: SolidityYulFunctionCall, y: SolidityYulDecimalNumber)
solidity_yul_function_call_yul_decimal_number_c(x, as(y, SolidityYulDecimalNumber)) :- solidity_yul_function_call(x), solidity_child(x, y).
.decl solidity_yul_function_call_yul_function_call_c(x: SolidityYulFunctionCall, y: SolidityYulFunctionCall)
solidity_yul_function_call_yul_function_call_c(x, as(y, SolidityYulFunctionCall)) :- solidity_yul_function_call(x), solidity_child(x, y).
.decl solidity_yul_function_call_yul_hex_number_c(x: SolidityYulFunctionCall, y: SolidityYulHexNumber)
solidity_yul_function_call_yul_hex_number_c(x, as(y, SolidityYulHexNumber)) :- solidity_yul_function_call(x), solidity_child(x, y).
.decl solidity_yul_function_call_yul_path_c(x: SolidityYulFunctionCall, y: SolidityYulPath)
solidity_yul_function_call_yul_path_c(x, as(y, SolidityYulPath)) :- solidity_yul_function_call(x), solidity_child(x, y).
.decl solidity_yul_function_call_yul_string_literal_c(x: SolidityYulFunctionCall, y: SolidityYulStringLiteral)
solidity_yul_function_call_yul_string_literal_c(x, as(y, SolidityYulStringLiteral)) :- solidity_yul_function_call(x), solidity_child(x, y).

.type SolidityYulFunctionDefinition <: symbol
.decl solidity_yul_function_definition(x: SolidityYulFunctionDefinition)
solidity_yul_function_definition(as(x, SolidityYulFunctionDefinition)) :- solidity_node(x, "yul_function_definition", _, _, _, _, _, _, _, _, _, _, _).
.decl solidity_yul_function_definition_yul_block_c(x: SolidityYulFunctionDefinition, y: SolidityYulBlock)
solidity_yul_function_definition_yul_block_c(x, as(y, SolidityYulBlock)) :- solidity_yul_function_definition(x), solidity_child(x, y).
.decl solidity_yul_function_definition_yul_identifier_c(x: SolidityYulFunctionDefinition, y: SolidityYulIdentifier)
solidity_yul_function_definition_yul_identifier_c(x, as(y, SolidityYulIdentifier)) :- solidity_yul_function_definition(x), solidity_child(x, y).

.type SolidityYulIdentifier <: symbol
.decl solidity_yul_identifier(x: SolidityYulIdentifier)
solidity_yul_identifier(as(x, SolidityYulIdentifier)) :- solidity_node(x, "yul_identifier", _, _, _, _, _, _, _, _, _, _, _).
.decl solidity_yul_identifier_identifier_c(x: SolidityYulIdentifier, y: SolidityIdentifier)
solidity_yul_identifier_identifier_c(x, as(y, SolidityIdentifier)) :- solidity_yul_identifier(x), solidity_child(x, y).

.type SolidityYulIfStatement <: symbol
.decl solidity_yul_if_statement(x: SolidityYulIfStatement)
solidity_yul_if_statement(as(x, SolidityYulIfStatement)) :- solidity_node(x, "yul_if_statement", _, _, _, _, _, _, _, _, _, _, _).
.decl solidity_yul_if_statement_yul_block_c(x: SolidityYulIfStatement, y: SolidityYulBlock)
solidity_yul_if_statement_yul_block_c(x, as(y, SolidityYulBlock)) :- solidity_yul_if_statement(x), solidity_child(x, y).
.decl solidity_yul_if_statement_yul_boolean_c(x: SolidityYulIfStatement, y: SolidityYulBoolean)
solidity_yul_if_statement_yul_boolean_c(x, as(y, SolidityYulBoolean)) :- solidity_yul_if_statement(x), solidity_child(x, y).
.decl solidity_yul_if_statement_yul_decimal_number_c(x: SolidityYulIfStatement, y: SolidityYulDecimalNumber)
solidity_yul_if_statement_yul_decimal_number_c(x, as(y, SolidityYulDecimalNumber)) :- solidity_yul_if_statement(x), solidity_child(x, y).
.decl solidity_yul_if_statement_yul_function_call_c(x: SolidityYulIfStatement, y: SolidityYulFunctionCall)
solidity_yul_if_statement_yul_function_call_c(x, as(y, SolidityYulFunctionCall)) :- solidity_yul_if_statement(x), solidity_child(x, y).
.decl solidity_yul_if_statement_yul_hex_number_c(x: SolidityYulIfStatement, y: SolidityYulHexNumber)
solidity_yul_if_statement_yul_hex_number_c(x, as(y, SolidityYulHexNumber)) :- solidity_yul_if_statement(x), solidity_child(x, y).
.decl solidity_yul_if_statement_yul_path_c(x: SolidityYulIfStatement, y: SolidityYulPath)
solidity_yul_if_statement_yul_path_c(x, as(y, SolidityYulPath)) :- solidity_yul_if_statement(x), solidity_child(x, y).
.decl solidity_yul_if_statement_yul_string_literal_c(x: SolidityYulIfStatement, y: SolidityYulStringLiteral)
solidity_yul_if_statement_yul_string_literal_c(x, as(y, SolidityYulStringLiteral)) :- solidity_yul_if_statement(x), solidity_child(x, y).

.type SolidityYulLabel <: symbol
.decl solidity_yul_label(x: SolidityYulLabel)
solidity_yul_label(as(x, SolidityYulLabel)) :- solidity_node(x, "yul_label", _, _, _, _, _, _, _, _, _, _, _).
.decl solidity_yul_label_identifier_c(x: SolidityYulLabel, y: SolidityIdentifier)
solidity_yul_label_identifier_c(x, as(y, SolidityIdentifier)) :- solidity_yul_label(x), solidity_child(x, y).

.type SolidityYulPath <: symbol
.decl solidity_yul_path(x: SolidityYulPath)
solidity_yul_path(as(x, SolidityYulPath)) :- solidity_node(x, "yul_path", _, _, _, _, _, _, _, _, _, _, _).
.decl solidity_yul_path_yul_identifier_c(x: SolidityYulPath, y: SolidityYulIdentifier)
solidity_yul_path_yul_identifier_c(x, as(y, SolidityYulIdentifier)) :- solidity_yul_path(x), solidity_child(x, y).

.type SolidityYulStringLiteral <: symbol
.decl solidity_yul_string_literal(x: SolidityYulStringLiteral)
solidity_yul_string_literal(as(x, SolidityYulStringLiteral)) :- solidity_node(x, "yul_string_literal", _, _, _, _, _, _, _, _, _, _, _).
.decl solidity_yul_string_literal_string_c(x: SolidityYulStringLiteral, y: SolidityString)
solidity_yul_string_literal_string_c(x, as(y, SolidityString)) :- solidity_yul_string_literal(x), solidity_child(x, y).

.type SolidityYulSwitchStatement <: symbol
.decl solidity_yul_switch_statement(x: SolidityYulSwitchStatement)
solidity_yul_switch_statement(as(x, SolidityYulSwitchStatement)) :- solidity_node(x, "yul_switch_statement", _, _, _, _, _, _, _, _, _, _, _).
.decl solidity_yul_switch_statement_yul_block_c(x: SolidityYulSwitchStatement, y: SolidityYulBlock)
solidity_yul_switch_statement_yul_block_c(x, as(y, SolidityYulBlock)) :- solidity_yul_switch_statement(x), solidity_child(x, y).
.decl solidity_yul_switch_statement_yul_boolean_c(x: SolidityYulSwitchStatement, y: SolidityYulBoolean)
solidity_yul_switch_statement_yul_boolean_c(x, as(y, SolidityYulBoolean)) :- solidity_yul_switch_statement(x), solidity_child(x, y).
.decl solidity_yul_switch_statement_yul_decimal_number_c(x: SolidityYulSwitchStatement, y: SolidityYulDecimalNumber)
solidity_yul_switch_statement_yul_decimal_number_c(x, as(y, SolidityYulDecimalNumber)) :- solidity_yul_switch_statement(x), solidity_child(x, y).
.decl solidity_yul_switch_statement_yul_function_call_c(x: SolidityYulSwitchStatement, y: SolidityYulFunctionCall)
solidity_yul_switch_statement_yul_function_call_c(x, as(y, SolidityYulFunctionCall)) :- solidity_yul_switch_statement(x), solidity_child(x, y).
.decl solidity_yul_switch_statement_yul_hex_number_c(x: SolidityYulSwitchStatement, y: SolidityYulHexNumber)
solidity_yul_switch_statement_yul_hex_number_c(x, as(y, SolidityYulHexNumber)) :- solidity_yul_switch_statement(x), solidity_child(x, y).
.decl solidity_yul_switch_statement_yul_path_c(x: SolidityYulSwitchStatement, y: SolidityYulPath)
solidity_yul_switch_statement_yul_path_c(x, as(y, SolidityYulPath)) :- solidity_yul_switch_statement(x), solidity_child(x, y).
.decl solidity_yul_switch_statement_yul_string_literal_c(x: SolidityYulSwitchStatement, y: SolidityYulStringLiteral)
solidity_yul_switch_statement_yul_string_literal_c(x, as(y, SolidityYulStringLiteral)) :- solidity_yul_switch_statement(x), solidity_child(x, y).

.type SolidityYulVariableDeclaration <: symbol
.decl solidity_yul_variable_declaration(x: SolidityYulVariableDeclaration)
solidity_yul_variable_declaration(as(x, SolidityYulVariableDeclaration)) :- solidity_node(x, "yul_variable_declaration", _, _, _, _, _, _, _, _, _, _, _).
.type SolidityFieldYulVariableDeclarationRight = SolidityYulBoolean | SolidityYulDecimalNumber | SolidityYulFunctionCall | SolidityYulHexNumber | SolidityYulPath | SolidityYulStringLiteral
.decl solidity_yul_variable_declaration_right_f(x: SolidityYulVariableDeclaration, y: SolidityFieldYulVariableDeclarationRight)
solidity_yul_variable_declaration_right_f(x, as(y, SolidityFieldYulVariableDeclarationRight)) :- solidity_yul_variable_declaration(x), solidity_field(x, "right", y).
.decl solidity_yul_variable_declaration_left_f(x: SolidityYulVariableDeclaration, y: SolidityYulIdentifier)
solidity_yul_variable_declaration_left_f(x, as(y, SolidityYulIdentifier)) :- solidity_yul_variable_declaration(x), solidity_field(x, "left", y).

.type SolidityComment <: symbol
.decl solidity_comment(x: SolidityComment)
solidity_comment(as(x, SolidityComment)) :- solidity_node(x, "comment", _, _, _, _, _, _, _, _, _, _, _).

.type SolidityEnumValue <: symbol
.decl solidity_enum_value(x: SolidityEnumValue)
solidity_enum_value(as(x, SolidityEnumValue)) :- solidity_node(x, "enum_value", _, _, _, _, _, _, _, _, _, _, _).

.type SolidityIdentifier <: symbol
.decl solidity_identifier(x: SolidityIdentifier)
solidity_identifier(as(x, SolidityIdentifier)) :- solidity_node(x, "identifier", _, _, _, _, _, _, _, _, _, _, _).

.type SolidityImmutable <: symbol
.decl solidity_immutable(x: SolidityImmutable)
solidity_immutable(as(x, SolidityImmutable)) :- solidity_node(x, "immutable", _, _, _, _, _, _, _, _, _, _, _).

.type SoliditySolidityVersion <: symbol
.decl solidity_solidity_version(x: SoliditySolidityVersion)
solidity_solidity_version(as(x, SoliditySolidityVersion)) :- solidity_node(x, "solidity_version", _, _, _, _, _, _, _, _, _, _, _).

.type SolidityVirtual <: symbol
.decl solidity_virtual(x: SolidityVirtual)
solidity_virtual(as(x, SolidityVirtual)) :- solidity_node(x, "virtual", _, _, _, _, _, _, _, _, _, _, _).

.type SolidityYulDecimalNumber <: symbol
.decl solidity_yul_decimal_number(x: SolidityYulDecimalNumber)
solidity_yul_decimal_number(as(x, SolidityYulDecimalNumber)) :- solidity_node(x, "yul_decimal_number", _, _, _, _, _, _, _, _, _, _, _).

.type SolidityYulHexNumber <: symbol
.decl solidity_yul_hex_number(x: SolidityYulHexNumber)
solidity_yul_hex_number(as(x, SolidityYulHexNumber)) :- solidity_node(x, "yul_hex_number", _, _, _, _, _, _, _, _, _, _, _).

.type SolidityYulLeave <: symbol
.decl solidity_yul_leave(x: SolidityYulLeave)
solidity_yul_leave(as(x, SolidityYulLeave)) :- solidity_node(x, "yul_leave", _, _, _, _, _, _, _, _, _, _, _).

.type SolidityNode = SolidityAnyPragmaToken | SolidityAnySourceType | SolidityArrayAccess | SolidityAssemblyStatement | SolidityAssignmentExpression | SolidityAugmentedAssignmentExpression | SolidityBinaryExpression | SolidityBlockStatement | SolidityBooleanLiteral | SolidityBreakStatement | SolidityCallArgument | SolidityCallExpression | SolidityCallStructArgument | SolidityCatchClause | SolidityConstantVariableDeclaration | SolidityConstructorDefinition | SolidityContinueStatement | SolidityContractBody | SolidityContractDeclaration | SolidityDoWhileStatement | SolidityEmitStatement | SolidityEnumDeclaration | SolidityErrorDeclaration | SolidityErrorParameter | SolidityEventDefinition | SolidityEventParamater | SolidityExpressionStatement | SolidityFallbackReceiveDefinition | SolidityFalse | SolidityForStatement | SolidityFunctionBody | SolidityFunctionDefinition | SolidityHexStringLiteral | SolidityIfStatement | SolidityImportDirective | SolidityInheritanceSpecifier | SolidityInlineArrayExpression | SolidityInterfaceDeclaration | SolidityLibraryDeclaration | SolidityMemberExpression | SolidityMetaTypeExpression | SolidityModifierDefinition | SolidityModifierInvocation | SolidityNewExpression | SolidityNumberLiteral | SolidityNumberUnit | SolidityOverrideSpecifier | SolidityParameter | SolidityParenthesizedExpression | SolidityPayableConversionExpression | SolidityPragmaDirective | SolidityPragmaValue | SolidityPrimitiveType | SolidityReturnParameter | SolidityReturnStatement | SolidityReturnTypeDefinition | SolidityRevertArguments | SolidityRevertStatement | SoliditySliceAccess | SoliditySolidityPragmaToken | SoliditySolidityVersionComparisonOperator | SoliditySourceFile | SolidityStateMutability | SolidityStateVariableDeclaration | SolidityString | SolidityStringLiteral | SolidityStructDeclaration | SolidityStructExpression | SolidityStructFieldAssignment | SolidityStructMember | SolidityTernaryExpression | SolidityTrue | SolidityTryStatement | SolidityTupleExpression | SolidityTypeAlias | SolidityTypeCastExpression | SolidityTypeName | SolidityUnaryExpression | SolidityUnicodeStringLiteral | SolidityUpdateExpression | SolidityUserDefinedType | SolidityUserDefinedTypeDefinition | SolidityUsingDirective | SolidityVariableDeclaration | SolidityVariableDeclarationStatement | SolidityVariableDeclarationTuple | SolidityVisibility | SolidityWhileStatement | SolidityYulAssignment | SolidityYulBlock | SolidityYulBoolean | SolidityYulBreak | SolidityYulContinue | SolidityYulEvmBuiltin | SolidityYulForStatement | SolidityYulFunctionCall | SolidityYulFunctionDefinition | SolidityYulIdentifier | SolidityYulIfStatement | SolidityYulLabel | SolidityYulPath | SolidityYulStringLiteral | SolidityYulSwitchStatement | SolidityYulVariableDeclaration | SolidityComment | SolidityEnumValue | SolidityIdentifier | SolidityImmutable | SoliditySolidityVersion | SolidityVirtual | SolidityYulDecimalNumber | SolidityYulHexNumber | SolidityYulLeave
.type SolidityNodeKind <: symbol
.type SolidityIsNamed <: symbol
.type SolidityIsError <: symbol
.type SolidityIsExtra <: symbol
.type SolidityIsMissing <: symbol
.type SolidityStartByte <: number
.type SolidityEndByte <: number
.type SolidityStartRow <: number
.type SolidityStartCol <: number
.type SolidityEndRow <: number
.type SolidityEndCol <: number
.type SolidityNodeText <: symbol
.decl solidity_node(id: SolidityNode, kind: SolidityNodeKind, is_named: SolidityIsNamed, is_extra: SolidityIsExtra, is_error: SolidityIsError, is_missing: SolidityIsMissing, start_byte: SolidityStartByte, end_byte: SolidityEndByte, start_row: SolidityStartRow, start_col: SolidityStartCol, end_row: SolidityEndRow, end_col: SolidityEndCol, text: SolidityNodeText)
.decl solidity_node_text(x: SolidityNode, y: SolidityNodeText) inline
solidity_node_text(x, y) :- solidity_node(x, _, _, _, _, _, _, _, _, _, _, _, y).
.input solidity_node(IO=file, filename="node.csv", rfc4180=true)
.type SolidityGrammarFieldName <: symbol
.decl solidity_field(parent: SolidityNode, name: SolidityGrammarFieldName, child: SolidityNode)
.input solidity_field(IO=file, filename="field.csv", rfc4180=true)
.decl solidity_child(parent: SolidityNode, child: SolidityNode)
.input solidity_child(IO=file, filename="child.csv", rfc4180=true)
